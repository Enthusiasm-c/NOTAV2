from __future__ import annotations
from dotenv import load_dotenv
load_dotenv()
import os
print({k: v for k, v in os.environ.items() if "TOKEN" in k or "KEY" in k or "URL" in k or "LOGIN" in k or "PASSWORD" in k or "STORE" in k})

"""
bot_runner.py
~~~~~~~~~~~~~

–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ Nota V2.

* –°–æ–∑–¥–∞—ë—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä Bot.
* –°–æ–±–∏—Ä–∞–µ—Ç –µ–¥–∏–Ω—ã–π Dispatcher, –ø–æ–¥–∫–ª—é—á–∞—è router-—ã –∏–∑ `app.routers.telegram_bot`.
* –ó–∞–ø—É—Å–∫–∞–µ—Ç long-polling –∏ –≤—ã–≤–æ–¥–∏—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ –≤ stdout.

–ó–∞–ø—É—Å–∫:

    python bot_runner.py                # –≤—Ä—É—á–Ω—É—é
    # –∏–ª–∏ —á–µ—Ä–µ–∑ systemd-unit (—Å–º. deploy/systemd/notav2-bot.service)
"""

import asyncio
import logging
import sys

from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from app.config.settings import get_settings
from app.routers.telegram_bot import router as main_router
from app.routers.issue_editor import router as editor_router

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
#
# INFO-—É—Ä–æ–≤–µ–Ω—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ä—Ç/—Å—Ç–æ–ø polling'–∞ –∏ –ª—é–±—ã–µ
# —Å–æ–æ–±—â–µ–Ω–∏—è logger-–æ–≤ aiogram'–∞.  DEBUG –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å, –∑–∞–¥–∞–≤
# –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å—Ä–µ–¥—ã LOG_LEVEL=DEBUG.
#
try:
    log_level_name = get_settings().log_level if hasattr(get_settings(), "log_level") else "INFO"
    log_level = logging.getLevelName(log_level_name.upper())
except (AttributeError, ValueError):
    log_level = logging.INFO

logging.basicConfig(
    level=log_level,  # INFO –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    datefmt="%H:%M:%S",
)
logger = logging.getLogger(__name__)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç polling-loop aiogram."""
    # –í—ã–≤–µ–¥–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"Python –≤–µ—Ä—Å–∏—è: {sys.version}")
    logger.info(f"Telegram token: {get_settings().telegram_bot_token[:5]}...")
    logger.info(f"Log level: {log_level}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(token=get_settings().telegram_bot_token)
    storage = MemoryStorage()  # –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è FSM
    dp = Dispatcher(storage=storage)
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ —Ä–æ—É—Ç–µ—Ä—ã
    dp.include_router(main_router)
    dp.include_router(editor_router)  # –ù–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–æ—Ä–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π

    # –û—á–∏—Å—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º long polling
    logger.info("–û—á–∏—Å—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞...")
    await bot.delete_webhook(drop_pending_updates=True)
    
    logger.info("üöÄ Nota V2 bot starting polling‚Ä¶")
    try:
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        await bot.session.close()
    
    logger.info("‚úÖ Polling finished (graceful shutdown)")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("üõë Bot stopped by user interrupt")
    except Exception as e:
        logger.exception(f"‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        sys.exit(1)
