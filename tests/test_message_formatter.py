"""–¢–µ—Å—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π."""
import pytest
from pathlib import Path
from app.utils.message_formatter import (
    escape_markdown,
    format_number,
    format_date,
    get_status_emoji,
    format_position,
    build_message
)
from tests.data.sample_invoices import TEST_INVOICES, TEST_ISSUES

# –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
GOLDEN_DIR = Path(__file__).parent / "data" / "golden"

def read_golden_file(name: str) -> str:
    """–ß–∏—Ç–∞–µ—Ç —ç—Ç–∞–ª–æ–Ω–Ω—ã–π —Ñ–∞–π–ª."""
    with open(GOLDEN_DIR / f"invoice_{name}.txt", "r", encoding="utf-8") as f:
        return f.read().strip()

def test_escape_markdown():
    """–¢–µ—Å—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ Markdown."""
    assert escape_markdown("Test*Bold*") == "Test\\*Bold\\*"
    assert escape_markdown("Price: 100.50") == "Price\\: 100\\.50"
    assert escape_markdown(None) == "‚Äî"
    assert escape_markdown("") == "‚Äî"

def test_format_number():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª."""
    assert format_number(100.50) == "100.5"
    assert format_number(100.00) == "100"
    assert format_number(None) == "‚Äî"
    assert format_number("not a number") == "‚Äî"

def test_format_date():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã."""
    assert format_date("2024-03-15") == "15.03.2024"
    assert format_date("invalid date") == "invalid date"
    assert format_date("") == "‚Äî"
    assert format_date(None) == "‚Äî"

def test_get_status_emoji():
    """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç–º–æ–¥–∑–∏-—Å—Ç–∞—Ç—É—Å–∞."""
    assert get_status_emoji([]) == "‚úÖ"
    assert get_status_emoji([{"type": "product_not_found"}]) == "üîç"
    assert get_status_emoji([{"type": "unit_mismatch"}]) == "üìè"
    assert get_status_emoji([{"type": "sum_mismatch"}]) == "üíµ"
    assert get_status_emoji([{"type": "unknown_issue"}]) == "‚ùì"

def test_format_position():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏."""
    pos = {
        "name": "Test Product",
        "quantity": 2.0,
        "unit": "pcs",
        "price": 100.50,
        "sum": 201.00
    }
    expected = "1\\. ‚úÖ Test Product\n     2 pcs √ó 100.5 = 201"
    assert format_position(pos, 1, []) == expected

@pytest.mark.parametrize("case", [
    "ok",
    "not_found",
    "empty",
    "multiple_issues"
])
def test_build_message_golden(case):
    """–¢–µ—Å—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤."""
    invoice = TEST_INVOICES[case]
    issues = TEST_ISSUES[case]
    expected = read_golden_file(case)
    result = build_message(invoice, issues)
    assert result == expected

def test_build_message_with_issues():
    """–¢–µ—Å—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏."""
    issues = [
        {
            "type": "product_not_found",
            "index": 1,
            "message": "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
        },
        {
            "type": "sum_mismatch",
            "index": 2,
            "message": "–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞"
        }
    ]
    message = build_message(TEST_INVOICES["not_found"], issues)
    assert "üìë" in message
    assert "‚úÖ 0 –ø–æ–∑–∏—Ü–∏–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ ‚Ä¢ ‚ö†Ô∏è 2 —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è" in message
    assert "üîç" in message  # –î–ª—è –ø–µ—Ä–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
    assert "üíµ" in message  # –î–ª—è –≤—Ç–æ—Ä–æ–π –ø–æ–∑–∏—Ü–∏–∏

def test_message_length_limit():
    """–¢–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è."""
    message = build_message(TEST_INVOICES["long_values"], [])
    assert len(message) <= 4096
    assert message.endswith("...") 