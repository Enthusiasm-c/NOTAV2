#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
"""
import os
import re
import argparse
import csv
import sqlite3
from pathlib import Path


def fix_env_connection_string():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ .env —Ñ–∞–π–ª–µ"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ .env
    env_path = os.path.join(os.getcwd(), ".env")
    if os.path.exists(env_path):
        print(f"–û–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª: {env_path}")
        with open(env_path, 'r') as f:
            content = f.read()
        
        # –ó–∞–º–µ–Ω—è–µ–º sqlite:/// –Ω–∞ sqlite+aiosqlite:///
        if 'DATABASE_URL=sqlite:///' in content:
            content = re.sub(r'DATABASE_URL=sqlite:///', 'DATABASE_URL=sqlite+aiosqlite:///', content)
            print("–ó–∞–º–µ–Ω–µ–Ω–æ sqlite:/// –Ω–∞ sqlite+aiosqlite:///")
        
        with open(env_path, 'w') as f:
            f.write(content)
        
        print("‚úÖ –§–∞–π–ª .env –æ–±–Ω–æ–≤–ª–µ–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –¥—Ä–∞–π–≤–µ—Ä–æ–º")
    else:
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")


def get_db_path():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ë–î –∏–∑ .env –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    env_path = os.path.join(os.getcwd(), ".env")
    db_path = None
    
    if os.path.exists(env_path):
        with open(env_path, 'r') as f:
            for line in f:
                if line.startswith('DATABASE_URL='):
                    db_url = line.strip().split('=', 1)[1]
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑ URL
                    if '///' in db_url:
                        db_path = db_url.split('///')[-1]
                        break
    
    if not db_path:
        db_path = os.path.join(os.getcwd(), "notav2.db")
        print(f"‚ùó –ü—É—Ç—å –∫ –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {db_path}")
    else:
        print(f"üìÇ –ù–∞–π–¥–µ–Ω –ø—É—Ç—å –∫ –ë–î: {db_path}")
    
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ë–î —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    db_dir = os.path.dirname(db_path)
    if db_dir and not os.path.exists(db_dir):
        os.makedirs(db_dir)
        print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ë–î: {db_dir}")
    
    return db_path


def create_tables(db_path):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print(f"üîß –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {db_path}")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    # SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
    sql = """
    -- Suppliers table
    CREATE TABLE IF NOT EXISTS suppliers (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name VARCHAR NOT NULL,
        code VARCHAR(64) UNIQUE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- Products table
    CREATE TABLE IF NOT EXISTS products (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name VARCHAR(255) UNIQUE NOT NULL,
        unit VARCHAR(16) NOT NULL,
        price DECIMAL(14,2),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- Product name lookup table
    CREATE TABLE IF NOT EXISTS product_name_lookup (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        product_id INTEGER NOT NULL,
        alias VARCHAR(255) NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (product_id) REFERENCES products(id) ON DELETE CASCADE
    );

    -- Invoices table
    CREATE TABLE IF NOT EXISTS invoices (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        supplier_id INTEGER,
        number VARCHAR(64),
        date DATE NOT NULL,
        total_sum DECIMAL(14,2),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (supplier_id) REFERENCES suppliers(id) ON DELETE SET NULL
    );

    -- Invoice items table
    CREATE TABLE IF NOT EXISTS invoice_items (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        invoice_id INTEGER NOT NULL,
        product_id INTEGER NOT NULL,
        quantity DECIMAL(14,3) NOT NULL,
        price DECIMAL(14,2) NOT NULL,
        sum DECIMAL(14,2) NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (invoice_id) REFERENCES invoices(id) ON DELETE CASCADE,
        FOREIGN KEY (product_id) REFERENCES products(id) ON DELETE CASCADE
    );

    -- Create indexes
    CREATE INDEX IF NOT EXISTS ix_suppliers_name ON suppliers(name);
    CREATE INDEX IF NOT EXISTS ix_suppliers_code ON suppliers(code);
    CREATE INDEX IF NOT EXISTS ix_products_name ON products(name);
    CREATE INDEX IF NOT EXISTS ix_product_name_lookup_alias ON product_name_lookup(alias);
    CREATE INDEX IF NOT EXISTS ix_product_name_lookup_product_id ON product_name_lookup(product_id);
    CREATE INDEX IF NOT EXISTS ix_invoices_supplier_id ON invoices(supplier_id);
    CREATE INDEX IF NOT EXISTS ix_invoices_number ON invoices(number);
    CREATE INDEX IF NOT EXISTS ix_invoices_date ON invoices(date);
    CREATE INDEX IF NOT EXISTS ix_invoice_items_invoice_id ON invoice_items(invoice_id);
    CREATE INDEX IF NOT EXISTS ix_invoice_items_product_id ON invoice_items(product_id);
    """
    
    cursor.executescript(sql)
    conn.commit()
    conn.close()
    
    print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")


def parse_csv(path):
    """–ü–∞—Ä—Å–∏—Ç CSV-—Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π."""
    with open(path, encoding='utf-8') as f:
        reader = csv.DictReader(f)
        return list(reader)


def load_data(db_path, data_type, csv_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    print(f"üìä –ó–∞–≥—Ä—É–∂–∞–µ–º {data_type} –∏–∑ {csv_path}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not os.path.exists(csv_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {csv_path}")
        return False
    
    # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV
    rows = parse_csv(csv_path)
    print(f"üìã –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(rows)} —Å—Ç—Ä–æ–∫ –∏–∑ CSV")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    if data_type == "suppliers":
        for row in rows:
            cursor.execute(
                "INSERT OR IGNORE INTO suppliers (name, code) VALUES (?, ?)",
                (row.get("name", ""), row.get("code", ""))
            )
    elif data_type == "products":
        for row in rows:
            cursor.execute(
                "INSERT OR IGNORE INTO products (name, unit) VALUES (?, ?)",
                (row.get("name", ""), row.get("measureName", ""))
            )
    elif data_type == "lookups":
        for row in rows:
            cursor.execute(
                "INSERT OR IGNORE INTO product_name_lookup (product_id, alias) VALUES (?, ?)",
                (row.get("product_id", ""), row.get("alias", ""))
            )
    
    # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    conn.commit()
    conn.close()
    
    print(f"‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ {len(rows)} —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü—É {data_type}")
    return True


def check_data(db_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
    cursor.execute('SELECT COUNT(*) FROM suppliers')
    suppliers_count = cursor.fetchone()[0]
    print(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: {suppliers_count}')
    
    cursor.execute('SELECT COUNT(*) FROM products')
    products_count = cursor.fetchone()[0]
    print(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {products_count}')
    
    cursor.execute('SELECT COUNT(*) FROM product_name_lookup')
    lookups_count = cursor.fetchone()[0]
    print(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ lookup-–∑–∞–ø–∏—Å–µ–π: {lookups_count}')
    
    conn.close()


def main():
    parser = argparse.ArgumentParser(description="–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ")
    parser.add_argument("--fix-only", action="store_true", help="–¢–æ–ª—å–∫–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
    parser.add_argument("--suppliers", type=str, help="–ü—É—Ç—å –∫ CSV —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏", default="data/base_suppliers.csv")
    parser.add_argument("--products", type=str, help="–ü—É—Ç—å –∫ CSV —Å —Ç–æ–≤–∞—Ä–∞–º–∏", default="data/base_products.csv")
    args = parser.parse_args()
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    fix_env_connection_string()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ë–î
    db_path = get_db_path()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    create_tables(db_path)
    
    if not args.fix_only:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        load_data(db_path, "suppliers", args.suppliers)
        load_data(db_path, "products", args.products)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        check_data(db_path)
    
    print("\nüéâ –ü—Ä–æ—Ü–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print("\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:")
    print("python -m app")


if __name__ == "__main__":
    main()
