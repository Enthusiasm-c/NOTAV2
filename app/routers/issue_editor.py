"""
UI-—Ä–µ–¥–∞–∫—Ç–æ—Ä —Å–ø–æ—Ä–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è Nota V2.

–ú–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö
–ø–æ–∑–∏—Ü–∏–π –Ω–∞–∫–ª–∞–¥–Ω–æ–π —á–µ—Ä–µ–∑ —á–∞—Ç Telegram:
* –í—ã–±–æ—Ä –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –∏–∑ —Å–ø–∏—Å–∫–∞
* –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è, –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
* –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
* –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π
* –í—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤

–ü–æ—Å—Ç—Ä–æ–µ–Ω –Ω–∞ aiogram FSM (Finite State Machine).
"""

from __future__ import annotations

import re
import math
import structlog
from decimal import Decimal
from typing import Any, Dict, List, Optional, Tuple

from aiogram import Router, F, Bot
from aiogram.types import (
    Message, 
    CallbackQuery, 
    InlineKeyboardMarkup, 
    InlineKeyboardButton
)

# –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç Text –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏–π aiogram
try:
    # aiogram 3.x.x
    from aiogram.filters import Text
except ImportError:
    try:
        # aiogram 3.x –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ
        from aiogram.filters.text import Text
    except ImportError:
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - —Å–æ–∑–¥–∞–µ–º —Å–≤–æ—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
        class Text:
            """–°–æ–≤–º–µ—Å—Ç–∏–º–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ Text."""
            def __init__(self, text=None):
                self.text = text if isinstance(text, list) else [text] if text else None
            
            def __call__(self, message):
                if hasattr(message, 'text'):
                    # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    return self.text is None or message.text in self.text
                elif hasattr(message, 'data'):
                    # –î–ª—è callback_query
                    return self.text is None or message.data in self.text
                return False

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from sqlalchemy import select, func
from sqlalchemy.ext.asyncio import AsyncSession

from app.db import SessionLocal
from app.models.product import Product
from app.models.invoice import Invoice
from app.models.invoice_item import InvoiceItem

# –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π unit_converter
try:
    from app.utils.unit_converter import normalize_unit, is_compatible_unit, convert
except ImportError:
    # –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ñ—É–Ω–∫—Ü–∏–π, –µ—Å–ª–∏ –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    def normalize_unit(unit_str: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è."""
        if not unit_str:
            return ""
        
        # –°–ª–æ–≤–∞—Ä—å –∞–ª–∏–∞—Å–æ–≤ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
        UNIT_ALIASES = {
            # –û–±—ä–µ–º
            "l": "l", "ltr": "l", "liter": "l", "liters": "l",
            "ml": "ml", "milliliter": "ml", "milliliters": "ml",
            
            # –í–µ—Å
            "kg": "kg", "kilo": "kg", "kilogram": "kg",
            "g": "g", "gr": "g", "gram": "g", "grams": "g",
            
            # –®—Ç—É—á–Ω—ã–µ
            "pcs": "pcs", "pc": "pcs", "piece": "pcs", "pieces": "pcs",
            "pack": "pack", "package": "pack", "pkg": "pack",
            "box": "box", "boxes": "box",
            
            # –ò–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏–µ –∞–ª–∏–∞—Å—ã
            "liter": "l", "lt": "l",
            "mililiter": "ml", "mili": "ml",
            "kilogram": "kg", "kilo": "kg",
            "gram": "g",
            "buah": "pcs", "biji": "pcs", "pcs": "pcs", "potong": "pcs",
            "paket": "pack", "pak": "pack",
            "kotak": "box", "dus": "box", "kardus": "box",
        }
        
        unit_str = unit_str.lower().strip()
        return UNIT_ALIASES.get(unit_str, unit_str)
    
    def is_compatible_unit(unit1: str, unit2: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è."""
        unit1 = normalize_unit(unit1)
        unit2 = normalize_unit(unit2)
        
        # –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –≤—Å–µ–≥–¥–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã
        if unit1 == unit2:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        volume_units = {"l", "ml"}
        weight_units = {"kg", "g"}
        countable_units = {"pcs", "pack", "box"}
        
        if unit1 in volume_units and unit2 in volume_units:
            return True
        if unit1 in weight_units and unit2 in weight_units:
            return True
        if unit1 in countable_units and unit2 in countable_units:
            return False  # –®—Ç—É—á–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –æ–±—ã—á–Ω–æ –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã –±–µ–∑ –¥–æ–ø. –∑–Ω–∞–Ω–∏–π
        
        return False
    
    def convert(value: float, from_unit: str, to_unit: str) -> Optional[float]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–µ–∂–¥—É –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è."""
        from_unit = normalize_unit(from_unit)
        to_unit = normalize_unit(to_unit)
        
        # –ï—Å–ª–∏ –µ–¥–∏–Ω–∏—Ü—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
        if from_unit == to_unit:
            return value
        
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        conversion_factors = {
            ("ml", "l"): 0.001,
            ("l", "ml"): 1000,
            ("g", "kg"): 0.001,
            ("kg", "g"): 1000,
        }
        
        # –ü–æ–∏—Å–∫ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞
        factor = conversion_factors.get((from_unit, to_unit))
        if factor is not None:
            return value * factor
        
        # –ù–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        return None

from app.config import settings

logger = structlog.get_logger()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ FSM States ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class InvoiceEditStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∫–ª–∞–¥–Ω–æ–π."""
    invoice_preview = State()     # –ê. –ü—Ä–µ–≤—å—é –Ω–∞–∫–ª–∞–¥–Ω–æ–π
    issue_list = State()          # B. –°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º
    issue_edit = State()          # C. –†–µ–¥–∞–∫—Ç–æ—Ä —Å—Ç—Ä–æ–∫–∏
    field_input = State()         # D. –í–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è (—Ç–µ–∫—Å—Ç/—Ü–∏—Ñ—Ä–∞)
    product_select = State()      # E. –í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
    new_product = State()         # F. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    confirm = State()             # G. –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Callback Data Prefixes ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ü—Ä–µ—Ñ–∏–∫—Å—ã –¥–ª—è callback-–¥–∞–Ω–Ω—ã—Ö (–Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏)
CB_ISSUE_PREFIX = "issue_"         # issue_1, issue_2...
CB_ACTION_PREFIX = "action_"       # action_name, action_qty...
CB_PRODUCT_PREFIX = "product_"     # product_123 (id)
CB_PAGE_PREFIX = "page_"           # page_2 (–ø–∞–≥–∏–Ω–∞—Ü–∏—è)
CB_UNIT_PREFIX = "unit_"           # unit_kg, unit_g...
CB_CANCEL = "cancel"
CB_BACK = "back"
CB_DONE = "done"
CB_SEARCH = "search"
CB_ADD_NEW = "add_new"
CB_ADD_POSITION = "add_position"


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def make_issue_list_keyboard(issues: List[Dict[str, Any]]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π."""
    keyboard = []
    
    # –î–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–æ–±–ª–µ–º–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ - –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å —ç–º–æ–¥–∑–∏
    for i, issue in enumerate(issues):
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        original = issue.get("original", {})
        item_name = original.get("name", "").split(' ')[0]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ–∑ –µ–¥–∏–Ω–∏—Ü
        item_name = item_name[:15] + "..." if len(item_name) > 15 else item_name
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–æ–±–ª–µ–º—ã
        issue_type = issue.get("issue", "–ü—Ä–æ–±–ª–µ–º–∞")
        if "Not in database" in issue_type:
            emoji = "üî¥"  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤ –±–∞–∑–µ
        elif "incorrect match" in issue_type:
            emoji = "üü°"  # –ñ–µ–ª—Ç—ã–π –¥–ª—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        elif "Unit" in issue_type:
            emoji = "üü†"  # –û—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è –ø—Ä–æ–±–ª–µ–º —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è
        else:
            emoji = "‚ö†Ô∏è"  # –û–±—â–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
        
        btn_text = f"{i+1}. {emoji} {item_name}"
        keyboard.append([InlineKeyboardButton(
            text=btn_text, 
            callback_data=f"{CB_ISSUE_PREFIX}{i}"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
    keyboard.append([InlineKeyboardButton(
        text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", 
        callback_data=CB_ADD_POSITION
    )])
    
    # –ö–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ" –∏ "–û—Ç–º–µ–Ω–∞"
    keyboard.append([
        InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=CB_DONE),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=CB_CANCEL)
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def make_item_edit_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∏–∫–æ–Ω–∫–∞–º–∏."""
    keyboard = [
        # –ü–µ—Ä–≤—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫ - –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        [
            InlineKeyboardButton(text="üì¶ –¢–æ–≤–∞—Ä", callback_data=f"{CB_ACTION_PREFIX}name"),
            InlineKeyboardButton(text="üî¢ –ö–æ–ª-–≤–æ", callback_data=f"{CB_ACTION_PREFIX}qty"),
            InlineKeyboardButton(text="üìè –ï–¥.–∏–∑–º", callback_data=f"{CB_ACTION_PREFIX}unit"),
        ],
        # –í—Ç–æ—Ä–æ–π —Ä—è–¥ - —É–¥–∞–ª–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—Ç
        [
            InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"{CB_ACTION_PREFIX}delete"),
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=CB_BACK)
        ]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def make_product_select_keyboard(
    products: List[Tuple], 
    page: int = 0, 
    page_size: int = 5
) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    keyboard = []
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = page * page_size
    end_idx = min(start_idx + page_size, len(products))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    for i in range(start_idx, end_idx):
        product_id, name, unit = products[i]
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏
        display_name = f"{name} ({unit})"
        if len(display_name) > 30:
            display_name = display_name[:27] + "..."
            
        keyboard.append([InlineKeyboardButton(
            text=display_name,
            callback_data=f"{CB_PRODUCT_PREFIX}{product_id}"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    pagination_buttons = []
    
    # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
    if page > 0:
        pagination_buttons.append(InlineKeyboardButton(
            text="‚óÄÔ∏è –ü—Ä–µ–¥.", 
            callback_data=f"{CB_PAGE_PREFIX}{page-1}"
        ))
    
    # –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
    if end_idx < len(products):
        pagination_buttons.append(InlineKeyboardButton(
            text="–°–ª–µ–¥. ‚ñ∂Ô∏è", 
            callback_data=f"{CB_PAGE_PREFIX}{page+1}"
        ))
    
    if pagination_buttons:
        keyboard.append(pagination_buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    keyboard.append([
        InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫", callback_data=CB_SEARCH),
        InlineKeyboardButton(text="‚ûï –ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä", callback_data=CB_ADD_NEW)
    ])
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=CB_BACK)])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def make_unit_select_keyboard(units: List[str]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è."""
    keyboard = []
    
    # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 3 –≤ —Ä—è–¥
    row = []
    for i, unit in enumerate(units):
        row.append(InlineKeyboardButton(
            text=unit,
            callback_data=f"{CB_UNIT_PREFIX}{unit}"
        ))
        
        if (i + 1) % 3 == 0 or i == len(units) - 1:
            keyboard.append(row)
            row = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=CB_BACK)])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def make_confirm_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏."""
    keyboard = [
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="inv_ok")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–∞–≤–∫–∞–º", callback_data=CB_BACK)]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


async def get_products_by_name(
    session: AsyncSession, 
    name_query: str, 
    limit: int = 20
) -> List[Tuple]:
    """
    –ò—â–µ—Ç —Ç–æ–≤–∞—Ä—ã –ø–æ —á–∞—Å—Ç–∏ –∏–º–µ–Ω–∏.
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (id, name, unit)
    """
    stmt = (
        select(Product.id, Product.name, Product.unit)
        .where(func.lower(Product.name).like(f"%{name_query.lower()}%"))
        .order_by(Product.name)
        .limit(limit)
    )
    
    result = await session.execute(stmt)
    return result.all()


async def format_issue_for_edit(issue: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–±–ª–µ–º–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    original = issue.get("original", {})
    
    name = original.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä")
    quantity = original.get("quantity", 0)
    unit = original.get("unit", "")
    price = original.get("price", 0)
    sum_val = original.get("sum", 0)
    
    # –¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã
    issue_type = issue.get("issue", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–æ–±–ª–µ–º—ã
    if "Not in database" in issue_type:
        emoji = "üî¥"
        issue_description = "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ"
    elif "incorrect match" in issue_type:
        emoji = "üü°"
        issue_description = "–í–æ–∑–º–æ–∂–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ"
    elif "Unit" in issue_type:
        emoji = "üü†"
        issue_description = "–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è"
    else:
        emoji = "‚ö†Ô∏è"
        issue_description = issue_type
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ–∑–∏—Ü–∏–∏
    formatted = f"{emoji} *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏*\n\n"
    formatted += f"*–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:* {name}\n"
    formatted += f"*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* {quantity} {unit}\n"
    
    if price:
        formatted += f"*–¶–µ–Ω–∞:* {price:,.2f}\n"
    
    if sum_val:
        formatted += f"*–°—É–º–º–∞:* {sum_val:,.2f}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–±–ª–µ–º–µ
    formatted += f"\n*–ü—Ä–æ–±–ª–µ–º–∞:* {issue_description}\n"
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ
    if product := issue.get("product"):
        formatted += f"\n*–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:*\n"
        formatted += f"*‚Üí –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:* {product.name}\n"
        formatted += f"*‚Üí –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è:* {product.unit}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º
    formatted += f"\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã:"
    
    return formatted


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–∞ –Ω–∞–∫–ª–∞–¥–Ω–æ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ markdown –º–æ–¥—É–ª—è
async def format_final_invoice(
    invoice_data: Dict[str, Any], 
    original_issues: List[Dict[str, Any]],
    fixed_issues: Dict[int, Dict[str, Any]]
) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤–∏–¥ –Ω–∞–∫–ª–∞–¥–Ω–æ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ markdown.
    
    –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é make_final_preview –∏–∑ utils.markdown –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Å–∏–≤–æ–π —Å–≤–æ–¥–∫–∏.
    """
    try:
        from app.utils.markdown import make_final_preview
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        return make_final_preview(invoice_data, original_issues, fixed_issues)
    except ImportError:
        # –ï—Å–ª–∏ –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
        result = f"üìÑ *Supplier:* \"{invoice_data.get('supplier', 'Unknown')}\"  \n"
        result += f"üóìÔ∏è *Date:* {invoice_data.get('date', 'Unknown')}"
        
        if invoice_number := invoice_data.get('number'):
            result += f"  ‚Ññ {invoice_number}"
        
        result += "\n\n"
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏ –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö
        positions = invoice_data.get("positions", [])
        total_sum = 0
        fixed_count = len(fixed_issues)
        
        result += f"üìã *–ü–æ–∑–∏—Ü–∏–∏ ({len(positions)} —à—Ç.):*\n"
        
        for i, pos in enumerate(positions):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            if pos.get("deleted", False):
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –ø–æ–∑–∏—Ü–∏—è –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö
            is_issue = any(i == issue.get("index", 0) - 1 for issue in original_issues)
            was_fixed = i in fixed_issues
            
            name = pos.get("name", "")
            quantity = pos.get("quantity", 0)
            unit = pos.get("unit", "")
            price = pos.get("price", 0)
            sum_val = pos.get("sum", 0) if pos.get("sum") else (price * float(quantity) if price else 0)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –æ—Ç–º–µ—Ç–∫—É
            if was_fixed:
                prefix = "‚úÖ "  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
            elif is_issue:
                prefix = "‚ö†Ô∏è "  # –ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞
            else:
                prefix = "‚Ä¢ "   # –û–±—ã—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–∑–∏—Ü–∏–∏
            pos_str = f"{prefix}{name}, {quantity} {unit}"
            if price:
                pos_str += f" –ø–æ {price:,.2f}"
            if sum_val:
                pos_str += f" = {sum_val:,.2f}"
            
            result += f"{pos_str}\n"
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É
            try:
                total_sum += float(sum_val)
            except (ValueError, TypeError):
                pass
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É
        result += f"\nüí∞ *–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞:* {total_sum:,.2f}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º
        if fixed_count > 0:
            result += f"\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {fixed_count}"
        
        remaining_issues = len(original_issues) - fixed_count
        if remaining_issues > 0:
            result += f"\n‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–æ–±–ª–µ–º: {remaining_issues}"
        
        return result

# –î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ issue_editor.py - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ handlers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
router = Router(name="issue_editor")

@router.callback_query(Text("inv_edit"))
async def cb_start_fix(c: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'Fix Issues' - –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    invoice = data.get("invoice", {})
    issues = data.get("issues", [])
    
    if not issues:
        await c.message.answer("‚ùå –ù–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        await c.answer()
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(current_issues=issues, fixed_issues={})
    await state.set_state(InvoiceEditStates.issue_list)
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–±–ª–µ–º
    try:
        from app.utils.markdown import make_issue_list
        message = make_issue_list(issues)
    except ImportError:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –º–æ–¥—É–ª—è
        message = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n\n"
        for i, issue in enumerate(issues):
            original = issue.get("original", {})
            name = original.get("name", "–ü–æ–∑–∏—Ü–∏—è")
            quantity = original.get("quantity", 0)
            unit = original.get("unit", "")
            
            issue_type = issue.get("issue", "–ü—Ä–æ–±–ª–µ–º–∞")
            
            message += f"{i+1}. *{name}*, {quantity} {unit} - {issue_type}\n"
    
    keyboard = make_issue_list_keyboard(issues)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await c.message.edit_text(message, reply_markup=keyboard, parse_mode="Markdown")
    await c.answer()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –í—ã–±–æ—Ä –ø—Ä–æ–±–ª–µ–º–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.callback_query(lambda c: c.data.startswith(CB_ISSUE_PREFIX), InvoiceEditStates.issue_list)
async def cb_select_issue(c: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–±–ª–µ–º–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞."""
    issue_idx = int(c.data[len(CB_ISSUE_PREFIX):])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    issues = data.get("current_issues", [])
    
    if issue_idx >= len(issues):
        await c.answer("‚ùå –ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    selected_issue = issues[issue_idx]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(selected_issue=selected_issue, selected_issue_idx=issue_idx)
    await state.set_state(InvoiceEditStates.issue_edit)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –ø–æ–∑–∏—Ü–∏–∏
    message = await format_issue_for_edit(selected_issue)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    keyboard = make_item_edit_keyboard()
    await c.message.edit_text(message, reply_markup=keyboard, parse_mode="Markdown")
    await c.answer()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –î–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–∑–∏—Ü–∏–µ–π ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.callback_query(lambda c: c.data.startswith(CB_ACTION_PREFIX), InvoiceEditStates.issue_edit)
async def cb_action_with_item(c: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–∑–∏—Ü–∏–µ–π (–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ —Ç.–¥.)."""
    action = c.data[len(CB_ACTION_PREFIX):]
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    selected_issue = data.get("selected_issue", {})
    original = selected_issue.get("original", {})
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    if action == "name":
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–æ–≤–∞—Ä–∞
        await state.set_state(InvoiceEditStates.product_select)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –ø–µ—Ä–≤—ã–º –±—É–∫–≤–∞–º –∏–º–µ–Ω–∏
        name_query = original.get("name", "")[:3]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
        
        async with SessionLocal() as session:
            products = await get_products_by_name(session, name_query)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(products=products, current_page=0)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
        keyboard = make_product_select_keyboard(products)
        await c.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ *{original.get('name', '')}*:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    
    elif action == "qty":
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        await state.set_state(InvoiceEditStates.field_input)
        await state.update_data(field="quantity")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        await c.message.edit_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è *{original.get('name', '')}*.\n"
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {original.get('quantity', 0)} {original.get('unit', '')}\n\n"
            f"–î—Ä–æ–±–Ω—ã–µ —á–∏—Å–ª–∞ –≤–≤–æ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5",
            parse_mode="Markdown"
        )
    
    elif action == "unit":
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
        await state.set_state(InvoiceEditStates.field_input)
        await state.update_data(field="unit")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
        common_units = ["kg", "g", "l", "ml", "pcs", "pack", "box"]
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –µ–¥–∏–Ω–∏—Ü—É –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
        product = selected_issue.get("product")
        if product and product.unit:
            if product.unit not in common_units:
                common_units.insert(0, product.unit)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
        keyboard = make_unit_select_keyboard(common_units)
        
        await c.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–ª—è *{original.get('name', '')}*.\n"
            f"–¢–µ–∫—É—â–∞—è –µ–¥–∏–Ω–∏—Ü–∞: {original.get('unit', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    
    elif action == "delete":
        # –ü–æ–º–µ—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—É—é
        invoice_data = data.get("invoice", {})
        positions = invoice_data.get("positions", [])
        
        issue_idx = data.get("selected_issue_idx", 0)
        issues = data.get("current_issues", [])
        
        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –ø–æ–∑–∏—Ü–∏–∏ –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ –ø–æ–∑–∏—Ü–∏–π
        position_idx = issues[issue_idx].get("index", 0) - 1
        
        if 0 <= position_idx < len(positions):
            # –ü–æ–º–µ—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—É—é
            positions[position_idx]["deleted"] = True
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            invoice_data["positions"] = positions
            await state.update_data(invoice=invoice_data)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            fixed_issues = data.get("fixed_issues", {})
            fixed_issues[position_idx] = {"action": "delete"}
            await state.update_data(fixed_issues=fixed_issues)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ–±–ª–µ–º
            await state.set_state(InvoiceEditStates.issue_list)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º (—É–¥–∞–ª—è–µ–º —Ä–µ—à–µ–Ω–Ω—É—é)
            current_issues = [issue for i, issue in enumerate(issues) if i != issue_idx]
            await state.update_data(current_issues=current_issues)
            
            # –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º –±–æ–ª—å—à–µ –Ω–µ—Ç, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
            if not current_issues:
                await state.set_state(InvoiceEditStates.confirm)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–æ–≤—ã–º —Å–ø–∏—Å–∫–æ–º
                message = await format_final_invoice(
                    invoice_data, 
                    data.get("issues", []),
                    fixed_issues
                )
                
                keyboard = make_confirm_keyboard()
                await c.message.edit_text(message, reply_markup=keyboard, parse_mode="Markdown")
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º
                try:
                    from app.utils.markdown import make_issue_list
                    message = make_issue_list(current_issues)
                except ImportError:
                    message = "–ü–æ–∑–∏—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n\n"
                    for i, issue in enumerate(current_issues):
                        original = issue.get("original", {})
                        name = original.get("name", "–ü–æ–∑–∏—Ü–∏—è")
                        quantity = original.get("quantity", 0)
                        unit = original.get("unit", "")
                        
                        issue_type = issue.get("issue", "–ü—Ä–æ–±–ª–µ–º–∞")
                        
                        message += f"{i+1}. *{name}*, {quantity} {unit} - {issue_type}\n"
                
                keyboard = make_issue_list_keyboard(current_issues)
                await c.message.edit_text(message, reply_markup=keyboard, parse_mode="Markdown")
        else:
            await c.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏.")
    
    await c.answer()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.callback_query(lambda c: c.data.startswith(CB_PRODUCT_PREFIX), InvoiceEditStates.product_select)
async def cb_select_product(c: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞."""
    product_id = int(c.data[len(CB_PRODUCT_PREFIX):])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    selected_issue = data.get("selected_issue", {})
    invoice_data = data.get("invoice", {})
    positions = invoice_data.get("positions", [])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç–æ–≤–∞—Ä–µ
    async with SessionLocal() as session:
        stmt = select(Product).where(Product.id == product_id)
        result = await session.execute(stmt)
        product = result.scalar_one_or_none()
    
    if not product:
        await c.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –≤ —Å–ø–∏—Å–∫–µ –ø–æ–∑–∏—Ü–∏–π –Ω–∞–∫–ª–∞–¥–Ω–æ–π
    issue_idx = data.get("selected_issue_idx", 0)
    issues = data.get("current_issues", [])
    
    position_idx = issues[issue_idx].get("index", 0) - 1
    
    if 0 <= position_idx < len(positions):
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
        positions[position_idx]["match_id"] = product.id
        positions[position_idx]["match_name"] = product.name
        positions[position_idx]["confidence"] = 1.0  # –†—É—á–Ω–æ–π –≤—ã–±–æ—Ä - 100% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
        original_unit = positions[position_idx].get("unit", "")
        if original_unit and not is_compatible_unit(original_unit, product.unit):
            # –ï—Å–ª–∏ –µ–¥–∏–Ω–∏—Ü—ã –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–±–Ω–æ–≤–∏—Ç—å
            positions[position_idx]["unit_issue"] = True
            positions[position_idx]["product_unit"] = product.unit
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        invoice_data["positions"] = positions
        await state.update_data(invoice=invoice_data)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        fixed_issues = data.get("fixed_issues", {})
        fixed_issues[position_idx] = {
            "action": "replace_product",
            "product_id": product.id,
            "product_name": product.name
        }
        await state.update_data(fixed_issues=fixed_issues)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ–±–ª–µ–º
        await state.set_state(InvoiceEditStates.issue_list)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º (—É–¥–∞–ª—è–µ–º —Ä–µ—à–µ–Ω–Ω—É—é)
        current_issues = [issue for i, issue in enumerate(issues) if i != issue_idx]
        await state.update_data(current_issues=current_issues)
        
        # –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º –±–æ–ª—å—à–µ –Ω–µ—Ç, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        if not current_issues:
            await state.set_state(InvoiceEditStates.confirm)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–æ–≤—ã–º —Å–ø–∏—Å–∫–æ–º
            message = await format_final_invoice(
                invoice_data, 
                data.get("issues", []),
                fixed_issues
            )
            
            keyboard = make_confirm_keyboard()
            await c.message.edit_text(message, reply_markup=keyboard, parse_mode="Markdown")
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º
            try:
                from app.utils.markdown import make_issue_list
                message = f"‚úÖ –¢–æ–≤–∞—Ä –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ *{product.name}*.\n\n" + make_issue_list(current_issues)
            except ImportError:
                message = f"‚úÖ –¢–æ–≤–∞—Ä –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ *{product.name}*. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –ø–æ–∑–∏—Ü–∏—é:\n\n"
                for i, issue in enumerate(current_issues):
                    original = issue.get("original", {})
                    name = original.get("name", "–ü–æ–∑–∏—Ü–∏—è")
                    quantity = original.get("quantity", 0)
                    unit = original.get("unit", "")
                    
                    issue_type = issue.get("issue", "–ü—Ä–æ–±–ª–µ–º–∞")
                    
                    message += f"{i+1}. *{name}*, {quantity} {unit} - {issue_type}\n"
            
            keyboard = make_issue_list_keyboard(current_issues)
            await c.message.edit_text(message, reply_markup=keyboard, parse_mode="Markdown")
    else:
        await c.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏.")
    
    await c.answer()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–∞–≥–∏–Ω–∞—Ü–∏—è –≤ —Å–ø–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–æ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.callback_query(lambda c: c.data.startswith(CB_PAGE_PREFIX), InvoiceEditStates.product_select)
async def cb_change_page(c: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ —Å–ø–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–æ–≤."""
    page = int(c.data[len(CB_PAGE_PREFIX):])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    products = data.get("products", [])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await state.update_data(current_page=page)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    keyboard = make_product_select_keyboard(products, page)
    
    selected_issue = data.get("selected_issue", {})
    original = selected_issue.get("original", {})
    
    await c.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ *{original.get('name', '')}* (—Å—Ç—Ä. {page+1}):",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    
    await c.answer()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.callback_query(Text(CB_SEARCH), InvoiceEditStates.product_select)
async def cb_search_product(c: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞."""
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    await state.update_data(field="search")
    await state.set_state(InvoiceEditStates.field_input)
    
    await c.message.edit_text(
        "üîç –í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        parse_mode="Markdown"
    )
    
    await c.answer()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –í—ã–±–æ—Ä –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.callback_query(lambda c: c.data.startswith(CB_UNIT_PREFIX), InvoiceEditStates.field_input)
async def cb_select_unit(c: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è."""
    unit = c.data[len(CB_UNIT_PREFIX):]
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    selected_issue = data.get("selected_issue", {})
    invoice_data = data.get("invoice", {})
    positions = invoice_data.get("positions", [])
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –≤ —Å–ø–∏—Å–∫–µ –ø–æ–∑–∏—Ü–∏–π –Ω–∞–∫–ª–∞–¥–Ω–æ–π
    issue_idx = data.get("selected_issue_idx", 0)
    issues = data.get("current_issues", [])
    
    position_idx = issues[issue_idx].get("index", 0) - 1
    
    if 0 <= position_idx < len(positions):
        # –°—Ç–∞—Ä–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
        old_unit = positions[position_idx].get("unit", "")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è
        positions[position_idx]["unit"] = unit
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        product = selected_issue.get("product")
        if product and is_compatible_unit(unit, product.unit) and unit != product.unit:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            await state.update_data(
                conversion_from=unit,
                conversion_to=product.unit,
                position_idx=position_idx
            )
            
            # –ü—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="convert_yes"),
                    InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="convert_no")
                ]
            ])
            
            quantity = positions[position_idx].get("quantity", 0)
            
            await c.message.edit_text(
                f"–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ *{unit}*.\n\n"
                f"–¢–æ–≤–∞—Ä –≤ –±–∞–∑–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –µ–¥–∏–Ω–∏—Ü—É *{product.unit}*.\n"
                f"–•–æ—Ç–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ {unit} –≤ {product.unit}?\n\n"
                f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} {unit}",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            await c.answer()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        invoice_data["positions"] = positions
        await state.update_data(invoice=invoice_data)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        fixed_issues = data.get("fixed_issues", {})
        fixed_issues[position_idx] = {
            "action": "change_unit",
            "old_unit": old_unit,
            "new_unit": unit
        }
        await state.update_data(fixed_issues=fixed_issues)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ–±–ª–µ–º
        await state.set_state(InvoiceEditStates.issue_list)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º (—É–¥–∞–ª—è–µ–º —Ä–µ—à–µ–Ω–Ω—É—é)
        current_issues = [issue for i, issue in enumerate(issues) if i != issue_idx]
        await state.update_data(current_issues=current_issues)
        
        # –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º –±–æ–ª—å—à–µ –Ω–µ—Ç, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        if not current_issues:
            await state.set_state(InvoiceEditStates.confirm)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–æ–≤—ã–º —Å–ø–∏—Å–∫–æ–º
            message = await format_final_invoice(
                invoice_data, 
                data.get("issues", []),
                fixed_issues
            )
            
            keyboard = make_confirm_keyboard()
            await c.message.edit_text(message, reply_markup=keyboard, parse_mode="Markdown")
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º
            try:
                from app.utils.markdown import make_issue_list
                message = f"‚úÖ –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ *{unit}*.\n\n" + make_issue_list(current_issues)
            except ImportError:
                message = f"‚úÖ –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ *{unit}*. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –ø–æ–∑–∏—Ü–∏—é:\n\n"
                for i, issue in enumerate(current_issues):
                    original = issue.get("original", {})
                    name = original.get("name", "–ü–æ–∑–∏—Ü–∏—è")
                    quantity = original.get("quantity", 0)
                    unit = original.get("unit", "")
                    
                    issue_type = issue.get("issue", "–ü—Ä–æ–±–ª–µ–º–∞")
                    
                    message += f"{i+1}. *{name}*, {quantity} {unit} - {issue_type}\n"
            
            keyboard = make_issue_list_keyboard(current_issues)
            await c.message.edit_text(message, reply_markup=keyboard, parse_mode="Markdown")
    else:
        await c.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è.")
    
    await c.answer()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.callback_query(Text("convert_yes"))
async def cb_convert_yes(c: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è."""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    invoice_data = data.get("invoice", {})
    positions = invoice_data.get("positions", [])
    
    conversion_from = data.get("conversion_from", "")
    conversion_to = data.get("conversion_to", "")
    position_idx = data.get("position_idx", -1)
    
    if 0 <= position_idx < len(positions):
        quantity = positions[position_idx].get("quantity", 0)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
        try:
            quantity_float = float(quantity)
            converted = convert(quantity_float, conversion_from, conversion_to)
            
            if converted is not None:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –µ–¥–∏–Ω–∏—Ü—É
                positions[position_idx]["quantity"] = converted
                positions[position_idx]["unit"] = conversion_to
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—É, –µ—Å–ª–∏ –µ—Å—Ç—å —Ü–µ–Ω–∞
                if price := positions[position_idx].get("price"):
                    try:
                        price_float = float(price)
                        positions[position_idx]["sum"] = converted * price_float
                    except (ValueError, TypeError):
                        pass
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                invoice_data["positions"] = positions
                await state.update_data(invoice=invoice_data)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                fixed_issues = data.get("fixed_issues", {})
                fixed_issues[position_idx] = {
                    "action": "convert_unit",
                    "from_unit": conversion_from,
                    "to_unit": conversion_to,
                    "old_quantity": quantity,
                    "new_quantity": converted
                }
                await state.update_data(fixed_issues=fixed_issues)
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ–±–ª–µ–º
                await state.set_state(InvoiceEditStates.issue_list)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º (—É–¥–∞–ª—è–µ–º —Ä–µ—à–µ–Ω–Ω—É—é)
                issues = data.get("current_issues", [])
                issue_idx = data.get("selected_issue_idx", 0)
                current_issues = [issue for i, issue in enumerate(issues) if i != issue_idx]
                await state.update_data(current_issues=current_issues)
                
                # –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º –±–æ–ª—å—à–µ –Ω–µ—Ç, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
                if not current_issues:
                    await state.set_state(InvoiceEditStates.confirm)
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–æ–≤—ã–º —Å–ø–∏—Å–∫–æ–º
                    message = await format_final_invoice(
                        invoice_data, 
                        data.get("issues", []),
                        fixed_issues
                    )
                    
                    keyboard = make_confirm_keyboard()
                    await c.message.edit_text(message, reply_markup=keyboard, parse_mode="Markdown")
                else:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º
                    try:
                        from app.utils.markdown import make_issue_list
                        message = (
                            f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {quantity} {conversion_from} ‚Üí "
                            f"{converted} {conversion_to}.\n\n" + make_issue_list(current_issues)
                        )
                    except ImportError:
                        message = (
                            f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {quantity} {conversion_from} ‚Üí "
                            f"{converted} {conversion_to}. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –ø–æ–∑–∏—Ü–∏—é:\n\n"
                        )
                        for i, issue in enumerate(current_issues):
                            original = issue.get("original", {})
                            name = original.get("name", "–ü–æ–∑–∏—Ü–∏—è")
                            quantity = original.get("quantity", 0)
                            unit = original.get("unit", "")
                            
                            issue_type = issue.get("issue", "–ü—Ä–æ–±–ª–µ–º–∞")
                            
                            message += f"{i+1}. *{name}*, {quantity} {unit} - {issue_type}\n"
                    
                    keyboard = make_issue_list_keyboard(current_issues)
                    await c.message.edit_text(message, reply_markup=keyboard, parse_mode="Markdown")
            else:
                # –ï—Å–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞
                await c.message.edit_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ {conversion_from} –≤ {conversion_to}.\n"
                    f"–í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ–±–ª–µ–º –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=CB_BACK)]
                    ]),
                    parse_mode="Markdown"
                )
        except (ValueError, TypeError):
            await c.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–æ —á–∏—Å–ª–æ–º.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=CB_BACK)]
                ]),
                parse_mode="Markdown"
            )
    else:
        await c.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏.")
    
    await c.answer()


@router.callback_query(Text("convert_no"))
async def cb_convert_no(c: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–∞–∑–∞ –æ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è."""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    invoice_data = data.get("invoice", {})
    positions = invoice_data.get("positions", [])
    
    conversion_to = data.get("conversion_to", "")
    position_idx = data.get("position_idx", -1)
    
    if 0 <= position_idx < len(positions):
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è, –±–µ–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        old_unit = positions[position_idx].get("unit", "")
        positions[position_idx]["unit"] = conversion_to
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        invoice_data["positions"] = positions
        await state.update_data(invoice=invoice_data)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        fixed_issues = data.get("fixed_issues", {})
        fixed_issues[position_idx] = {
            "action": "change_unit",
            "old_unit": old_unit,
            "new_unit": conversion_to
        }
        await state.update_data(fixed_issues=fixed_issues)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ–±–ª–µ–º
        await state.set_state(InvoiceEditStates.issue_list)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º (—É–¥–∞–ª—è–µ–º —Ä–µ—à–µ–Ω–Ω—É—é)
        issues = data.get("current_issues", [])
        issue_idx = data.get("selected_issue_idx", 0)
        current_issues = [issue for i, issue in enumerate(issues) if i != issue_idx]
        await state.update_data(current_issues=current_issues)
        
        # –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º –±–æ–ª—å—à–µ –Ω–µ—Ç, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        if not current_issues:
            await state.set_state(InvoiceEditStates.confirm)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–æ–≤—ã–º —Å–ø–∏—Å–∫–æ–º
            message = await format_final_invoice(
                invoice_data, 
                data.get("issues", []),
                fixed_issues
            )
            
            keyboard = make_confirm_keyboard()
            await c.message.edit_text(message, reply_markup=keyboard, parse_mode="Markdown")
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º
            try:
                from app.utils.markdown import make_issue_list
                message = f"‚úÖ –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ *{conversion_to}* (–±–µ–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞).\n\n" + make_issue_list(current_issues)
            except ImportError:
                message = f"‚úÖ –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ *{conversion_to}* (–±–µ–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞). –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –ø–æ–∑–∏—Ü–∏—é:\n\n"
                for i, issue in enumerate(current_issues):
                    original = issue.get("original", {})
                    name = original.get("name", "–ü–æ–∑–∏—Ü–∏—è")
                    quantity = original.get("quantity", 0)
                    unit = original.get("unit", "")
                    
                    issue_type = issue.get("issue", "–ü—Ä–æ–±–ª–µ–º–∞")
                    
                    message += f"{i+1}. *{name}*, {quantity} {unit} - {issue_type}\n"
            
            keyboard = make_issue_list_keyboard(current_issues)
            await c.message.edit_text(message, reply_markup=keyboard, parse_mode="Markdown")
    else:
        await c.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏.")
    
    await c.answer()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.message(InvoiceEditStates.field_input)
async def process_field_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—è (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å)."""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    field = data.get("field", "")
    
    if field == "quantity":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
            quantity_text = message.text.strip().replace(",", ".")
            quantity = float(quantity_text)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            selected_issue = data.get("selected_issue", {})
            invoice_data = data.get("invoice", {})
            positions = invoice_data.get("positions", [])
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –≤ —Å–ø–∏—Å–∫–µ –ø–æ–∑–∏—Ü–∏–π –Ω–∞–∫–ª–∞–¥–Ω–æ–π
            issue_idx = data.get("selected_issue_idx", 0)
            issues = data.get("current_issues", [])
            
            position_idx = issues[issue_idx].get("index", 0) - 1
            
            if 0 <= position_idx < len(positions):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                old_quantity = positions[position_idx].get("quantity", 0)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                positions[position_idx]["quantity"] = quantity
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—É, –µ—Å–ª–∏ –µ—Å—Ç—å —Ü–µ–Ω–∞
                if price := positions[position_idx].get("price"):
                    try:
                        price_float = float(price)
                        positions[position_idx]["sum"] = quantity * price_float
                    except (ValueError, TypeError):
                        pass
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                invoice_data["positions"] = positions
                await state.update_data(invoice=invoice_data)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                fixed_issues = data.get("fixed_issues", {})
                fixed_issues[position_idx] = {
                    "action": "change_quantity",
                    "old_quantity": old_quantity,
                    "new_quantity": quantity
                }
                await state.update_data(fixed_issues=fixed_issues)
                
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç)
                await message.delete()
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ–±–ª–µ–º
                await state.set_state(InvoiceEditStates.issue_list)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º (—É–¥–∞–ª—è–µ–º —Ä–µ—à–µ–Ω–Ω—É—é)
                current_issues = [issue for i, issue in enumerate(issues) if i != issue_idx]
                await state.update_data(current_issues=current_issues)
                
                # –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º –±–æ–ª—å—à–µ –Ω–µ—Ç, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
                if not current_issues:
                    await state.set_state(InvoiceEditStates.confirm)
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–æ–≤—ã–º —Å–ø–∏—Å–∫–æ–º
                    final_message = await format_final_invoice(
                        invoice_data, 
                        data.get("issues", []),
                        fixed_issues
                    )
                    
                    keyboard = make_confirm_keyboard()
                    await message.answer(final_message, reply_markup=keyboard, parse_mode="Markdown")
                else:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º
                    try:
                        from app.utils.markdown import make_issue_list
                        update_message = f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ *{quantity}*.\n\n" + make_issue_list(current_issues)
                    except ImportError:
                        update_message = f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ *{quantity}*. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –ø–æ–∑–∏—Ü–∏—é:\n\n"
                        for i, issue in enumerate(current_issues):
                            original = issue.get("original", {})
                            name = original.get("name", "–ü–æ–∑–∏—Ü–∏—è")
                            quantity = original.get("quantity", 0)
                            unit = original.get("unit", "")
                            
                            issue_type = issue.get("issue", "–ü—Ä–æ–±–ª–µ–º–∞")
                            
                            update_message += f"{i+1}. *{name}*, {quantity} {unit} - {issue_type}\n"
                    
                    keyboard = make_issue_list_keyboard(current_issues)
                    await message.answer(update_message, reply_markup=keyboard, parse_mode="Markdown")
            else:
                await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏.")
        except ValueError:
            await message.reply(
                "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –î—Ä–æ–±–Ω—ã–µ —á–∏—Å–ª–∞ –≤–≤–æ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5"
            )
    
    elif field == "search":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        search_query = message.text.strip()
        
        if len(search_query) < 2:
            await message.reply("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å. –í–≤–µ–¥–∏—Ç–µ –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
        
        # –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É
        async with SessionLocal() as session:
            products = await get_products_by_name(session, search_query)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.delete()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–æ–≤–∞—Ä–∞
        await state.set_state(InvoiceEditStates.product_select)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(products=products, current_page=0)
        
        if products:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞
            keyboard = make_product_select_keyboard(products)
            await message.answer(
                f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É *{search_query}* ({len(products)} —Ç–æ–≤–∞—Ä–æ–≤):",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        else:
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data=CB_SEARCH)],
                [InlineKeyboardButton(text="‚ûï –ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä", callback_data=CB_ADD_NEW)],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=CB_BACK)]
            ])
            
            await message.answer(
                f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É *{search_query}* –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.callback_query(Text(CB_BACK))
async def cb_back(c: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" - –≤–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é."""
    current_state = await state.get_state()
    
    if current_state == InvoiceEditStates.issue_edit.state:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ–±–ª–µ–º
        await state.set_state(InvoiceEditStates.issue_list)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        issues = data.get("current_issues", [])
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        try:
            from app.utils.markdown import make_issue_list
            message = make_issue_list(issues)
        except ImportError:
            message = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n\n"
            for i, issue in enumerate(issues):
                original = issue.get("original", {})
                name = original.get("name", "–ü–æ–∑–∏—Ü–∏—è")
                quantity = original.get("quantity", 0)
                unit = original.get("unit", "")
                
                issue_type = issue.get("issue", "–ü—Ä–æ–±–ª–µ–º–∞")
                
                message += f"{i+1}. *{name}*, {quantity} {unit} - {issue_type}\n"
        
        keyboard = make_issue_list_keyboard(issues)
        await c.message.edit_text(message, reply_markup=keyboard, parse_mode="Markdown")
    
    elif current_state == InvoiceEditStates.product_select.state:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –ø–æ–∑–∏—Ü–∏–∏
        await state.set_state(InvoiceEditStates.issue_edit)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        selected_issue = data.get("selected_issue", {})
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –ø–æ–∑–∏—Ü–∏–∏
        message = await format_issue_for_edit(selected_issue)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        keyboard = make_item_edit_keyboard()
        await c.message.edit_text(message, reply_markup=keyboard, parse_mode="Markdown")
    
    elif current_state == InvoiceEditStates.field_input.state:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –ø–æ–∑–∏—Ü–∏–∏
        await state.set_state(InvoiceEditStates.issue_edit)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        selected_issue = data.get("selected_issue", {})
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –ø–æ–∑–∏—Ü–∏–∏
        message = await format_issue_for_edit(selected_issue)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        keyboard = make_item_edit_keyboard()
        await c.message.edit_text(message, reply_markup=keyboard, parse_mode="Markdown")
    
    elif current_state == InvoiceEditStates.confirm.state:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ–±–ª–µ–º
        await state.set_state(InvoiceEditStates.issue_list)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        issues = data.get("current_issues", [])
        
        # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, –±–µ—Ä–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º
        if not issues:
            issues = data.get("issues", [])
            await state.update_data(current_issues=issues)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        try:
            from app.utils.markdown import make_issue_list
            message = make_issue_list(issues)
        except ImportError:
            message = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n\n"
            for i, issue in enumerate(issues):
                original = issue.get("original", {})
                name = original.get("name", "–ü–æ–∑–∏—Ü–∏—è")
                quantity = original.get("quantity", 0)
                unit = original.get("unit", "")
                
                issue_type = issue.get("issue", "–ü—Ä–æ–±–ª–µ–º–∞")
                
                message += f"{i+1}. *{name}*, {quantity} {unit} - {issue_type}\n"
        
        keyboard = make_issue_list_keyboard(issues)
        await c.message.edit_text(message, reply_markup=keyboard, parse_mode="Markdown")
    
    await c.answer()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞" ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.callback_query(Text(CB_CANCEL))
async def cb_cancel(c: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞" - –æ—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π."""
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    # (—ç—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞—è —Ç–æ—Ç –∂–µ callback_data, —á—Ç–æ –∏ –≤ –Ω–∞—á–∞–ª–µ)
    await c.message.edit_text(
        "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –ù–∞–∑–∞–¥ –∫ –Ω–∞–∫–ª–∞–¥–Ω–æ–π", callback_data="inv_edit")]
        ])
    )
    
    await c.answer()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–Ω–æ–ø–∫–∞ "–ì–æ—Ç–æ–≤–æ" ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.callback_query(Text(CB_DONE))
async def cb_done(c: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ" - –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é."""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    invoice_data = data.get("invoice", {})
    fixed_issues = data.get("fixed_issues", {})
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    await state.set_state(InvoiceEditStates.confirm)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–æ–≤—ã–º —Å–ø–∏—Å–∫–æ–º
    message = await format_final_invoice(
        invoice_data, 
        data.get("issues", []),
        fixed_issues
    )
    
    keyboard = make_confirm_keyboard()
    await c.message.edit_text(message, reply_markup=keyboard, parse_mode="Markdown")
    
    await c.answer()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é" ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.callback_query(Text(CB_ADD_POSITION))
async def cb_add_position(c: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é" - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏."""
    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
    # (—ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±—É–¥—É—â–µ–º)
    await c.answer("–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.callback_query(Text(CB_ADD_NEW))
async def cb_add_new_product(c: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä" - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞."""
    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    # (—ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±—É–¥—É—â–µ–º)
    await c.answer("–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
