"""
–§–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã –¥–ª—è –º–æ–¥—É–ª—è issue_editor.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä.
"""

from typing import Dict, Any, List, Tuple
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from app.config.issue_editor_constants import (
    CB_ISSUE_PREFIX,
    CB_PAGE_PREFIX,
    CB_PRODUCT_PREFIX,
    CB_ACTION_PREFIX,
    CB_UNIT_PREFIX,
    CB_CONVERT_PREFIX,
    CB_BACK,
    CB_SEARCH,
    PAGE_SIZE
)
from .constants import CB_CANCEL

def get_issue_icon(issue: Dict[str, Any]) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–∏–ø–∞ –ø—Ä–æ–±–ª–µ–º—ã.
    
    Args:
        issue: —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–±–ª–µ–º–µ
        
    Returns:
        str: —ç–º–æ–¥–∑–∏-–∏–∫–æ–Ω–∫–∞
    """
    issue_type = issue.get("type", "")
    if issue_type == "product":
        return "üîç"
    elif issue_type == "unit":
        return "üìè"
    elif issue_type == "quantity":
        return "üî¢"
    elif issue_type == "price":
        return "üí∞"
    return "‚ùì"

async def format_summary_message(data: Dict[str, Any]) -> Tuple[str, InlineKeyboardMarkup]:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.
    
    Args:
        data: —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π
        
    Returns:
        Tuple[str, InlineKeyboardMarkup]: (—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
    """
    text = "üìã *–ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ
    text += f"*–ü–æ—Å—Ç–∞–≤—â–∏–∫:* {data.get('supplier', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    text += f"*–î–∞—Ç–∞:* {data.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
    text += f"*–ù–æ–º–µ—Ä:* {data.get('number', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π
    text += "*–ü–æ–∑–∏—Ü–∏–∏:*\n"
    for pos in data.get("positions", []):
        if not pos.get("deleted", False):
            text += f"‚Ä¢ {pos.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} - "
            text += f"{pos.get('quantity', 0)} {pos.get('unit', '—à—Ç')} - "
            text += f"{pos.get('price', 0)} ‚ÇΩ\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
    text += f"\n*–ò—Ç–æ–≥–æ:* {data.get('total_sum', 0)} ‚ÇΩ"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="inv_ok"),
            InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="inv_edit")
        ]
    ])
    
    return text, keyboard

async def format_issues_list(
    data: Dict[str, Any], 
    page: int = 0
) -> Tuple[str, InlineKeyboardMarkup]:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    
    Args:
        data: —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π
        page: –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        
    Returns:
        Tuple[str, InlineKeyboardMarkup]: (—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
    """
    issues = data.get("issues", [])
    total_pages = (len(issues) + PAGE_SIZE - 1) // PAGE_SIZE
    
    text = "üìù *–°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è*\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = page * PAGE_SIZE
    end_idx = min(start_idx + PAGE_SIZE, len(issues))
    
    for i, issue in enumerate(issues[start_idx:end_idx], start=start_idx + 1):
        icon = get_issue_icon(issue)
        text += f"{i}. {icon} {issue.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
    if total_pages > 1:
        text += f"\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–±–ª–µ–º
    for i, issue in enumerate(issues[start_idx:end_idx], start=start_idx + 1):
        keyboard.append([
            InlineKeyboardButton(
                text=f"{i}. {issue.get('description', '')[:30]}...",
                callback_data=f"{CB_ISSUE_PREFIX}{i-1}"
            )
        ])
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"{CB_PAGE_PREFIX}{page-1}")
        )
    if page < total_pages - 1:
        nav_buttons.append(
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"{CB_PAGE_PREFIX}{page+1}")
        )
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    keyboard.append([
        InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫", callback_data=CB_SEARCH),
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=CB_BACK)
    ])
    
    return text, InlineKeyboardMarkup(inline_keyboard=keyboard)

async def format_issue_edit(
    issue: Dict[str, Any]
) -> Tuple[str, InlineKeyboardMarkup]:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã.
    
    Args:
        issue: —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–±–ª–µ–º–µ
        
    Returns:
        Tuple[str, InlineKeyboardMarkup]: (—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
    """
    text = "‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ*\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    text += f"*–ü—Ä–æ–±–ª–µ–º–∞:* {issue.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    text += "*–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:*\n"
    for field, value in issue.get("current_values", {}).items():
        text += f"‚Ä¢ {field}: {value}\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π
    for field in issue.get("editable_fields", []):
        keyboard.append([
            InlineKeyboardButton(
                text=f"‚úèÔ∏è {field}",
                callback_data=f"{CB_ACTION_PREFIX}{field}"
            )
        ])
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard.append([
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=CB_BACK),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=CB_CANCEL)
    ])
    
    return text, InlineKeyboardMarkup(inline_keyboard=keyboard)

async def format_product_select(
    products: List[Dict[str, Any]],
    query: str,
    page: int = 0
) -> Tuple[str, InlineKeyboardMarkup]:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞.
    
    Args:
        products: —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        query: –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        page: –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        
    Returns:
        Tuple[str, InlineKeyboardMarkup]: (—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
    """
    text = f"üîç *–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤: {query}*\n\n"
    
    if not products:
        text += "–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    else:
        for i, product in enumerate(products, 1):
            text += f"{i}. {product['name']} ({product['unit']})\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤
    for i, product in enumerate(products, 1):
        keyboard.append([
            InlineKeyboardButton(
                text=f"{i}. {product['name'][:30]}...",
                callback_data=f"{CB_PRODUCT_PREFIX}{product['id']}"
            )
        ])
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard.append([
        InlineKeyboardButton(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data=CB_SEARCH),
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=CB_BACK)
    ])
    
    return text, InlineKeyboardMarkup(inline_keyboard=keyboard)

def format_field_prompt(field: str, current_value: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è.
    
    Args:
        field: –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è
        current_value: —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        
    Returns:
        str: —Ç–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏
    """
    return (
        f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è *{field}*\n\n"
        f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_value}\n\n"
        "–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:"
    ) 