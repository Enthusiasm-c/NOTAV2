import json
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from app.db import SessionLocal
from app.models.product import Product
from app.models.invoice_state import InvoiceState, FSMState
from app.utils.markdown import make_invoice_markdown
from app.utils.syrve_export import build_xml, post_to_syrve

dp = Router()
router = dp        # —ç–∫—Å–ø–æ—Ä—Ç –ø–æ–¥ –≤—Ç–æ—Ä—ã–º –∏–º–µ–Ω–µ–º

# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π (FSM)
class Notafsm:
    waiting_photo = "waiting_photo"
    reviewing = "reviewing"
    editing = "editing"
    confirming = "confirming"
    done = "done"

# --- EDITING CALLBACK HANDLER ---

@dp.callback_query(lambda c: c.data.startswith("edit:"))
async def handle_editing_callback(call: CallbackQuery, state: FSMContext):
    # edit:<invoice_id>:<item_idx>:<action>
    _, invoice_id, item_idx, action = call.data.split(":")
    data = await state.get_data()
    draft = data.get("draft", {})
    positions = draft.get("positions", [])
    pos = positions[int(item_idx)]

    if action == "accept":
        pos["status"] = "accepted"
        await call.answer("–ü–æ–∑–∏—Ü–∏—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π üëå")
    elif action == "update":
        await state.update_data(editing_idx=item_idx)
        await call.message.answer(
            f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏:\n"
            f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {pos['name']}\n–ö–æ–ª-–≤–æ: {pos['quantity']}\n"
            f"–ï–¥.: {pos['unit']}\n–¶–µ–Ω–∞: {pos['price']}\n–°—É–º–º–∞: {pos['sum']}\n\n"
            f"–ù–∞–ø–∏—à–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ (–∏–ª–∏ /skip)."
        )
        await state.set_state("editing_item")
        return
    elif action == "new_product":
        pos["status"] = "new"
        # –õ–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –ë–î Products –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è lookup ‚Äî —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –∑–¥–µ—Å—å.
        await call.answer("–ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä!")
    await state.update_data(draft=draft)
    await show_next_editing(call.message, state)

async def show_next_editing(msg, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥. –Ω–µ—Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∏ –µ—ë –≤–∞—Ä–∏–∞–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
    data = await state.get_data()
    draft = data.get("draft", {})
    positions = draft.get("positions", [])
    for idx, pos in enumerate(positions):
        if pos.get("status") not in ("accepted", "new"):
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚úî –û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å",
                            callback_data=f"edit:{draft.get('invoice_id','')}:"
                                          f"{idx}:accept"
                        ),
                        InlineKeyboardButton(
                            text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å",
                            callback_data=f"edit:{draft.get('invoice_id','')}:"
                                          f"{idx}:update"
                        ),
                        InlineKeyboardButton(
                            text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä",
                            callback_data=f"edit:{draft.get('invoice_id','')}:"
                                          f"{idx}:new_product"
                        ),
                    ]
                ]
            )
            await msg.answer(
                f"–ü–æ–∑–∏—Ü–∏—è {idx + 1}:\n–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {pos['name']}\n"
                f"–ö–æ–ª-–≤–æ: {pos['quantity']}, {pos['unit']}\n–¶–µ–Ω–∞: {pos['price']}\n"
                f"–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {pos.get('confidence', 0) * 100:.1f}%",
                reply_markup=kb
            )
            return
    # –í—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã ‚Äî –ø–µ—Ä–µ—Ö–æ–¥ –∫ Confirming
    await state.set_state(Notafsm.confirming)
    md = make_invoice_markdown(draft)
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Syrve",
                    callback_data=f"confirm:{draft.get('invoice_id','')}:commit"
                ),
                InlineKeyboardButton(
                    text="üîÑ –û—Ç–º–µ–Ω–∞",
                    callback_data=f"confirm:{draft.get('invoice_id','')}:cancel"
                ),
            ]
        ]
    )
    await msg.answer(f"**–ß–µ—Ä–Ω–æ–≤–∏–∫ –Ω–∞–∫–ª–∞–¥–Ω–æ–π:**\n\n{md}", reply_markup=kb, parse_mode="Markdown")

# --- CONFIRMING CALLBACK HANDLER ---

@dp.callback_query(lambda c: c.data.startswith("confirm:"))
async def handle_confirming_callback(call: CallbackQuery, state: FSMContext):
    # confirm:<invoice_id>:<action>
    _, invoice_id, action = call.data.split(":")
    data = await state.get_data()
    draft = data.get("draft", {})
    if action == "commit":
        xml = build_xml(draft)
        ok, msg_text = await post_to_syrve(xml)
        result_text = (f"‚úÖ –£—Å–ø–µ—Ö! –ù–∞–∫–ª–∞–¥–Ω–∞—è ‚Ññ{invoice_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞." 
                       if ok else f"‚ùå –û—à–∏–±–∫–∞: {msg_text}")
        await state.set_state(Notafsm.done)
        await call.message.answer(result_text)
    elif action == "cancel":
        await call.message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await state.set_state(Notafsm.reviewing)
    else:
        await call.message.answer("–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
    # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º draft (B–î) –ø–æ—Å–ª–µ –ª—é–±–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    async with SessionLocal() as session:
        invoice_state = await session.get(InvoiceState, invoice_id)
        if invoice_state:
            invoice_state.json_draft = json.dumps(draft, ensure_ascii=False)
            invoice_state.state = Notafsm.confirming
            await session.commit()
