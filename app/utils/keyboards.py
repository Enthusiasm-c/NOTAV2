"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä –≤ Telegram-–±–æ—Ç–µ.
–°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä.
"""

from __future__ import annotations

from typing import List, Dict, Any, Optional, Tuple
import math

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –ü—Ä–µ—Ñ–∏–∫—Å—ã –¥–ª—è callback-–¥–∞–Ω–Ω—ã—Ö
CB_ISSUE_PREFIX = "issue:"         # issue:1, issue:2... (ID —Å—Ç—Ä–æ–∫–∏)
CB_PAGE_PREFIX = "page:"           # page:2 (–ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
CB_PRODUCT_PREFIX = "product:"     # product:123 (ID —Ç–æ–≤–∞—Ä–∞)
CB_ACTION_PREFIX = "action:"       # action:name, action:qty...
CB_UNIT_PREFIX = "unit:"           # unit:kg, unit:g...
CB_CONVERT_PREFIX = "convert:"     # convert:yes, convert:no
CB_ADD_NEW = "add_new"
CB_ADD_ALL = "add_all_missing"
CB_SEARCH = "search"
CB_BACK = "back"
CB_CANCEL = "cancel"
CB_CONFIRM = "inv_ok"              # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
CB_REVIEW = "review"

# –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
PAGE_SIZE = 5


def kb_summary(missing_count: int) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–≤–æ–¥–∫–∏ –Ω–∞–∫–ª–∞–¥–Ω–æ–π.
    
    :param missing_count: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
    :return: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    """
    buttons = []
    
    if missing_count > 0:
        buttons.append([
            InlineKeyboardButton(text="‚úÖ Confirm", callback_data=CB_CONFIRM),
            InlineKeyboardButton(text=f"üîç Review ({missing_count})", callback_data=CB_REVIEW)
        ])
    else:
        buttons.append([
            InlineKeyboardButton(text="‚úÖ Confirm and send", callback_data=CB_CONFIRM)
        ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def kb_issues(issues: List[Dict[str, Any]], page: int = 0) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    
    :param issues: —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
    :param page: —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–Ω–∞—á–∏–Ω–∞—è —Å 0)
    :return: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    """
    total_pages = math.ceil(len(issues) / PAGE_SIZE)
    page = max(0, min(page, total_pages - 1))
    
    buttons = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    start_idx = page * PAGE_SIZE
    end_idx = min(start_idx + PAGE_SIZE, len(issues))
    
    for i in range(start_idx, end_idx):
        issue = issues[i]
        index = issue.get("index", i + 1)
        original = issue.get("original", {})
        name = original.get("name", "Position")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏
        if len(name) > 25:
            name = name[:22] + "..."
            
        # –ü–æ–ª—É—á–∞–µ–º –∏–∫–æ–Ω–∫—É –ø—Ä–æ–±–ª–µ–º—ã
        issue_type = issue.get("issue", "")
        
        if "Not in database" in issue_type:
            icon = "‚ö†"
        elif "incorrect match" in issue_type:
            icon = "‚ùî"
        elif "Unit" in issue_type:
            icon = "üîÑ"
        else:
            icon = "‚ùì"
            
        btn_text = f"{index}. {icon} {name}"
        buttons.append([
            InlineKeyboardButton(text=btn_text, callback_data=f"{CB_ISSUE_PREFIX}{index}")
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    pagination_row = []
    
    # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
    if page > 0:
        pagination_row.append(
            InlineKeyboardButton(text="‚Ü© Prev", callback_data=f"{CB_PAGE_PREFIX}{page-1}")
        )
    
    # –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ"
    if any("Not in database" in issue.get("issue", "") for issue in issues):
        pagination_row.append(
            InlineKeyboardButton(text="‚ûï Add All Missing", callback_data=CB_ADD_ALL)
        )
    
    # –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
    if page < total_pages - 1:
        pagination_row.append(
            InlineKeyboardButton(text="Next ‚Ü™", callback_data=f"{CB_PAGE_PREFIX}{page+1}")
        )
    
    if pagination_row:
        buttons.append(pagination_row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–≤–æ–¥–∫–µ
    buttons.append([
        InlineKeyboardButton(text="‚úÖ Done", callback_data=CB_CONFIRM)
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def kb_issue_edit(issue: Dict[str, Any]) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–æ–±–ª–µ–º–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏.
    
    :param issue: –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–±–ª–µ–º–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
    :return: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    """
    issue_type = issue.get("issue", "")
    original = issue.get("original", {})
    
    buttons = []
    
    # –ü–µ—Ä–≤—ã–π —Ä—è–¥ - –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    row1 = [
        InlineKeyboardButton(text="üì¶ Product", callback_data=f"{CB_ACTION_PREFIX}name"),
        InlineKeyboardButton(text="üî¢ Quantity", callback_data=f"{CB_ACTION_PREFIX}qty"),
        InlineKeyboardButton(text="üìè Unit", callback_data=f"{CB_ACTION_PREFIX}unit")
    ]
    buttons.append(row1)
    
    # –í—Ç–æ—Ä–æ–π —Ä—è–¥ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–æ–±–ª–µ–º—ã
    row2 = []
    
    if "Not in database" in issue_type:
        row2.append(
            InlineKeyboardButton(text="‚ûï Add as new", callback_data=f"{CB_ACTION_PREFIX}add_new")
        )
    
    if "Unit" in issue_type and "product" in issue:
        row2.append(
            InlineKeyboardButton(
                text="üîÑ Convert units", 
                callback_data=f"{CB_ACTION_PREFIX}convert"
            )
        )
    
    if row2:
        buttons.append(row2)
    
    # –¢—Ä–µ—Ç–∏–π —Ä—è–¥ - —É–¥–∞–ª–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—Ç
    row3 = [
        InlineKeyboardButton(text="üóëÔ∏è Delete", callback_data=f"{CB_ACTION_PREFIX}delete"),
        InlineKeyboardButton(text="‚óÄÔ∏è Back", callback_data=CB_BACK)
    ]
    buttons.append(row3)
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def kb_product_select(
    products: List[Dict[str, Any]], 
    page: int = 0, 
    query: Optional[str] = None
) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    
    :param products: —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    :param page: —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    :param query: –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–µ—Å–ª–∏ –µ—Å—Ç—å)
    :return: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    """
    total_pages = math.ceil(len(products) / PAGE_SIZE)
    page = max(0, min(page, total_pages - 1))
    
    buttons = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    start_idx = page * PAGE_SIZE
    end_idx = min(start_idx + PAGE_SIZE, len(products))
    
    for i in range(start_idx, end_idx):
        product = products[i]
        product_id = product.get("id")
        name = product.get("name", "")
        unit = product.get("unit", "")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        if len(name) > 25:
            name = name[:22] + "..."
        
        display_text = f"{name} ({unit})"
        buttons.append([
            InlineKeyboardButton(text=display_text, callback_data=f"{CB_PRODUCT_PREFIX}{product_id}")
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_row = []
    
    # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
    if page > 0:
        pagination_row.append(
            InlineKeyboardButton(text="‚óÄÔ∏è Prev", callback_data=f"{CB_PAGE_PREFIX}{page-1}")
        )
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü)
    if total_pages > 1:
        pagination_row.append(
            InlineKeyboardButton(text=f"{page+1}/{total_pages}", callback_data="noop")
        )
    
    # –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
    if page < total_pages - 1:
        pagination_row.append(
            InlineKeyboardButton(text="Next ‚ñ∂Ô∏è", callback_data=f"{CB_PAGE_PREFIX}{page+1}")
        )
    
    if pagination_row:
        buttons.append(pagination_row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    action_row = []
    action_row.append(
        InlineKeyboardButton(text="üîç Search", callback_data=CB_SEARCH)
    )
    action_row.append(
        InlineKeyboardButton(text="‚ûï New product", callback_data=CB_ADD_NEW)
    )
    buttons.append(action_row)
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    buttons.append([
        InlineKeyboardButton(text="‚óÄÔ∏è Back", callback_data=CB_BACK)
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def kb_unit_select(units: List[str]) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è.
    
    :param units: —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
    :return: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    """
    buttons = []
    
    # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 3 –≤ —Ä—è–¥
    row = []
    for i, unit in enumerate(units):
        row.append(
            InlineKeyboardButton(text=unit, callback_data=f"{CB_UNIT_PREFIX}{unit}")
        )
        
        if (i + 1) % 3 == 0 or i == len(units) - 1:
            buttons.append(row)
            row = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    buttons.append([
        InlineKeyboardButton(text="‚óÄÔ∏è Back", callback_data=CB_BACK)
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def kb_convert_confirm() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è.
    
    :return: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    """
    buttons = [
        [
            InlineKeyboardButton(text="‚úÖ Yes", callback_data=f"{CB_CONVERT_PREFIX}yes"),
            InlineKeyboardButton(text="‚ùå No", callback_data=f"{CB_CONVERT_PREFIX}no")
        ],
        [
            InlineKeyboardButton(text="‚óÄÔ∏è Back", callback_data=CB_BACK)
        ]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def kb_confirm() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    
    :return: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    """
    buttons = [
        [
            InlineKeyboardButton(text="‚úÖ Confirm and send", callback_data=CB_CONFIRM)
        ],
        [
            InlineKeyboardButton(text="‚óÄÔ∏è Back to edits", callback_data=CB_BACK)
        ]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def kb_back_only() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥".
    
    :return: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    """
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚óÄÔ∏è Back", callback_data=CB_BACK)
        ]
    ])
