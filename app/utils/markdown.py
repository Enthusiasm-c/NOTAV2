"""
Markdown utilities for Nota V2.

This module provides functions for formatting text in Markdown format,
including escaping special characters and truncating long text.
"""

from __future__ import annotations
from typing import Dict, List, Any, Optional, Tuple
import re
from datetime import datetime

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ —Ç–æ–≤–∞—Ä–∞ –ø–µ—Ä–µ–¥ –æ–±—Ä–µ–∑–∫–æ–π
MAX_ITEM_LENGTH = 60

def format_date(date_str: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ DD MMM YYYY.
    
    Args:
        date_str: –°—Ç—Ä–æ–∫–∞ —Å –¥–∞—Ç–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
    """
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        try:
            dt = datetime.strptime(date_str, "%Y-%m-%d")
        except ValueError:
            try:
                dt = datetime.strptime(date_str, "%d-%m-%Y")
            except ValueError:
                return date_str  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –Ω—É–∂–Ω—ã–π –≤–∏–¥
        return dt.strftime("%d %b %Y").replace(" ", "-")
    except Exception:
        return date_str

def format_number(number: Any) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á.
    
    Args:
        number: –ß–∏—Å–ª–æ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ
    """
    try:
        if isinstance(number, str):
            # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ
            try:
                number = float(number.replace(',', '.'))
            except ValueError:
                return number
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
        return f"{number:,.2f}".replace(',', ' ')
    except Exception:
        return str(number)

def get_issue_emoji(issue_type: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–æ–±–ª–µ–º—ã.
    
    Args:
        issue_type: –°—Ç—Ä–æ–∫–∞ —Å —Ç–∏–ø–æ–º –ø—Ä–æ–±–ª–µ–º—ã
        
    Returns:
        str: –≠–º–æ–¥–∑–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–æ–±–ª–µ–º—ã
    """
    if "Not in database" in issue_type:
        return "üî¥"  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤ –±–∞–∑–µ
    elif "incorrect match" in issue_type:
        return "üü°"  # –ñ–µ–ª—Ç—ã–π –¥–ª—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    elif "Unit" in issue_type:
        return "üü†"  # –û—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è –ø—Ä–æ–±–ª–µ–º —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è
    else:
        return "‚ö†Ô∏è"  # –û–±—â–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º

def truncate_text(text: str, max_length: int = MAX_ITEM_LENGTH) -> str:
    """
    –û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω –¥–ª–∏–Ω–Ω–µ–µ max_length.
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
        
    Returns:
        str: –û–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ–º –∏–ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        
    Example:
        >>> truncate_text("Very long text that needs to be truncated", 10)
        'Very long...'
    """
    if len(text) > max_length:
        return text[:max_length-3] + "..."
    return text

def escape_markdown(text: Optional[str]) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown –≤ —Ç–µ–∫—Å—Ç–µ.
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ None
        
    Returns:
        str: –¢–µ–∫—Å—Ç —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
        
    Example:
        >>> escape_markdown("Text with *markdown* symbols")
        'Text with \\*markdown\\* symbols'
    """
    if not text:                         # –ª–æ–≤–∏–º None –∏–ª–∏ ""
        return ""
    markdown_chars = r"\_*[]()~>`|#"+ "!"
    return "".join(f"\\{c}" if c in markdown_chars else c for c in text)

def make_invoice_preview(
    data: Dict[str, Any], 
    issues: List[Dict[str, Any]], 
    fixed_issues: Dict[int, Dict[str, Any]] = None,
    show_all_issues: bool = False,
) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—É—é —Å–≤–æ–¥–∫—É –Ω–∞–∫–ª–∞–¥–Ω–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ MarkdownV2.
    
    Args:
        data: –î–∞–Ω–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π
        issues: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        fixed_issues: –°–ª–æ–≤–∞—Ä—å —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
        show_all_issues: –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ —Ç–æ–ª—å–∫–æ –≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–≤–æ–¥–∫–∞ –≤ MarkdownV2
    """
    fixed_issues = fixed_issues or {}
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    supplier = escape_markdown(data.get('supplier', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫'))
    date_str = format_date(data.get('date', ''))
    invoice_number = escape_markdown(data.get('number', ''))
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ
    positions = [p for p in data.get('positions', []) if not p.get('deleted', False)]
    
    # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_positions = len(positions)
    problem_count = len(issues)
    fixed_count = len(fixed_issues)
    valid_count = total_positions - problem_count
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ö–µ–¥–µ—Ä
    header = f"üì¶  *{supplier}* ‚Ä¢ {date_str}"
    if invoice_number:
        header += f" ‚Ññ {invoice_number}"
    
    # –°—Ç–∞—Ç—É—Å-–±–∞—Ä
    status_bar = "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    status_bar += f"‚úÖ {valid_count} –ø–æ–∑–∏—Ü–∏–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ\n"
    if problem_count > 0:
        status_bar += f"‚ö†Ô∏è {problem_count} –ø–æ–∑–∏—Ü–∏–π —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è"
        if not show_all_issues:
            status_bar += " \\(–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Ä–∞—Å–∫—Ä—ã—Ç—å\\)"
    
    # –°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
    issues_block = ""
    if problem_count > 0 and show_all_issues:
        issues_block = "\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        issues_block += "üö© *–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏:*\n\n"
        
        for i, issue in enumerate(issues):
            emoji = get_issue_emoji(issue.get('issue', ''))
            original = issue.get('original', {})
            name = escape_markdown(original.get('name', '–ü–æ–∑–∏—Ü–∏—è'))
            qty = original.get('quantity', '')
            unit = original.get('unit', '')
            price = format_number(original.get('price', 0))
            
            # –ö—Ä–∞—Ç–∫–æ –æ–± –æ—à–∏–±–∫–µ
            issue_text = issue.get('issue', '')
            if "Not in database" in issue_text:
                issue_info = "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ"
            elif "incorrect match" in issue_text:
                issue_info = "–í–æ–∑–º–æ–∂–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ"
            elif "Unit" in issue_text:
                issue_info = "–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è"
            else:
                issue_info = issue_text
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏
            name_display = truncate_text(name)
            
            issues_block += f"{i+1}\\. {emoji} *{name_display}*\n"
            issues_block += f"   {qty} {unit} √ó {price}\n"
            issues_block += f"   __{issue_info}__\n\n"

    return header + "\n" + status_bar + "\n" + issues_block

def make_issue_list(issues: List[Dict[str, Any]]) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown.
    
    Args:
        issues: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–±–ª–µ–º
        
    Example:
        >>> issues = [{"type": "error", "message": "Invalid unit"}]
        >>> make_issue_list(issues)
        '‚ùå Invalid unit'
    """
    if not issues:
        return "‚úÖ –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ."
    
    result = "*–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:*\n\n"
    
    for i, issue in enumerate(issues):
        emoji = get_issue_emoji(issue.get('issue', ''))
        original = issue.get('original', {})
        name = escape_markdown(original.get('name', '–ü–æ–∑–∏—Ü–∏—è'))
        qty = original.get('quantity', '')
        unit = original.get('unit', '')
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏
        name_display = truncate_text(name, 30)  # –ö–æ—Ä–æ—á–µ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        
        result += f"{i+1}\\. {emoji} *{name_display}* \\- {qty} {unit}\n"
    
    return result

def make_final_preview(
    data: Dict[str, Any], 
    original_issues: List[Dict[str, Any]],
    fixed_issues: Dict[int, Dict[str, Any]]
) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤–∏–¥ –Ω–∞–∫–ª–∞–¥–Ω–æ–π —Å –æ—Ç–º–µ—Ç–∫–æ–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π.
    
    Args:
        data: –î–∞–Ω–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π
        original_issues: –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        fixed_issues: –°–ª–æ–≤–∞—Ä—å —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–≤–æ–¥–∫–∞ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –Ω–µ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
    fixed_indices = set(fixed_issues.keys())
    remaining_issues = [
        issue for i, issue in enumerate(original_issues) 
        if issue.get("index") - 1 not in fixed_indices
    ]
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é —Å —Ñ–ª–∞–≥–æ–º –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º, –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –Ω–µ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ
    return make_invoice_preview(
        data, 
        remaining_issues, 
        fixed_issues,
        show_all_issues=len(remaining_issues) > 0
    )

def format_bold(text: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º."""
    return f"*{text}*"

def format_italic(text: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∫—É—Ä—Å–∏–≤–æ–º."""
    return f"_{text}_"

def format_code(text: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∫–∞–∫ –∫–æ–¥."""
    return f"`{text}`"

def format_list(items: List[str]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤."""
    return "\n".join(f"‚Ä¢ {item}" for item in items)

def format_table(headers: List[str], rows: List[List[str]]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É."""
    if not headers or not rows:
        return ""
        
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    header_row = " | ".join(headers)
    separator = " | ".join(["---"] * len(headers))
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏
    formatted_rows = []
    for row in rows:
        if len(row) != len(headers):
            continue
        formatted_rows.append(" | ".join(str(cell) for cell in row))
        
    return f"{header_row}\n{separator}\n" + "\n".join(formatted_rows)

def format_key_value(key: str, value: Any) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä—É –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ."""
    return f"{format_bold(key)}: {value}"

def format_section(title: str, content: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–µ–∫—Ü–∏—é —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º."""
    return f"{format_bold(title)}\n{content}"

def format_error(message: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ."""
    return f"‚ùå {format_bold(message)}"

def format_success(message: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ."""
    return f"‚úÖ {format_bold(message)}"

def format_warning(message: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ."""
    return f"‚ö†Ô∏è {format_bold(message)}"

def format_info(message: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    return f"‚ÑπÔ∏è {format_bold(message)}"
