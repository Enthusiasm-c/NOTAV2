"""
–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram –±–æ—Ç–∞.

–ú–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Markdown V2.
"""
from __future__ import annotations

import re
from typing import Dict, Any, List, Optional
from datetime import datetime

import structlog
from .markdown_v2 import md2_escape, format_list_item

logger = structlog.get_logger()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —ç–º–æ–¥–∑–∏-—Å—Ç–∞—Ç—É—Å–æ–≤
STATUS_EMOJIS = {
    "ok": "‚úÖ",
    "not_found": "üîç",
    "unit_mismatch": "üìè",
    "sum_mismatch": "üíµ",
    "other": "‚ùì"
}

# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown V2
_MD_V2_SPECIAL = r'_*[]()~`>#+-=|{}.!'

# –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –ø—Ä–æ–±–ª–µ–º (–º–µ–Ω—å—à–µ = –≤–∞–∂–Ω–µ–µ)
ISSUE_PRIORITIES = {
    "product_not_found": 1,
    "product_low_confidence": 1,
    "unit_mismatch": 2,
    "unit_missing_in_product": 2,
    "sum_mismatch": 3,
    "position_no_quantity": 4,
    "position_no_unit": 4,
    "position_no_name": 4,
}

def escape_markdown(text: str | None) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown V2.
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        
    Returns:
        str: –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    if not text:
        return "‚Äî"
    
    text = str(text)
    result = ""
    i = 0
    
    while i < len(text):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π —Å–∏–º–≤–æ–ª —ç–º–æ–¥–∑–∏
        if i + 1 < len(text) and 0x1F300 <= ord(text[i]) <= 0x1F9FF:
            result += text[i]
            i += 1
            continue
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ —Å–∏–º–≤–æ–ª
        if i > 0 and text[i-1] == '\\':
            result += text[i]
            i += 1
            continue
            
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª
        if text[i] in _MD_V2_SPECIAL:
            result += "\\" + text[i]
        else:
            result += text[i]
        i += 1
    
    return result

def format_number(value: float | None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ –±–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π.
    
    Args:
        value: –ß–∏—Å–ª–æ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ "‚Äî"
    """
    if value is None:
        return "‚Äî"
    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –Ω—É–ª–µ–π –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏
        num_str = f"{float(value):.2f}".rstrip('0').rstrip('.')
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –≤–∫–ª—é—á–∞—è –º–∏–Ω—É—Å –∏ —Ç–æ—á–∫—É
        return md2_escape(num_str)
    except (ValueError, TypeError):
        return "‚Äî"

def format_date(date_str: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥.
    
    Args:
        date_str: –°—Ç—Ä–æ–∫–∞ —Å –¥–∞—Ç–æ–π
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –∏–ª–∏ "‚Äî"
    """
    if not date_str:
        return "‚Äî"
    try:
        date = datetime.strptime(date_str, "%Y-%m-%d")
        return date.strftime("%d.%m.%Y")
    except ValueError:
        return md2_escape(date_str)

def get_status_emoji(issues: List[Dict[str, Any]]) -> str:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —ç–º–æ–¥–∑–∏-—Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–±–ª–µ–º.
    
    Args:
        issues: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º
        
    Returns:
        str: –≠–º–æ–¥–∑–∏-—Å—Ç–∞—Ç—É—Å
    """
    if not issues:
        return STATUS_EMOJIS["ok"]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
    issue_types = [issue.get("type", "unknown_issue") for issue in issues]
    
    if "product_not_found" in issue_types:
        return STATUS_EMOJIS["not_found"]
    elif "unit_mismatch" in issue_types:
        return STATUS_EMOJIS["unit_mismatch"]
    elif "sum_mismatch" in issue_types:
        return STATUS_EMOJIS["sum_mismatch"]
    else:
        return STATUS_EMOJIS["other"]

def format_position(pos: Dict[str, Any], idx: int, issues: List[Dict[str, Any]]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é –Ω–∞–∫–ª–∞–¥–Ω–æ–π.
    
    Args:
        pos: –î–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        idx: –ù–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
        issues: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ–∑–∏—Ü–∏–∏
    """
    name = md2_escape(pos.get("name", ""))
    qty = format_number(pos.get("quantity"))
    unit = md2_escape(pos.get("unit", ""))
    price = format_number(pos.get("price"))
    total = format_number(pos.get("sum"))
    
    status = get_status_emoji(issues)
    
    return format_list_item(idx, f"{status} {name}") + f"\n     {qty} {unit} √ó {price} = {total}"

def build_message(data: Dict[str, Any], issues: List[Dict[str, Any]]) -> str:
    """
    –°—Ç—Ä–æ–∏—Ç –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–∫–ª–∞–¥–Ω–æ–π.
    
    Args:
        data: –î–∞–Ω–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π
        issues: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    positions = data.get("positions", [])
    if not positions:
        return "üòï –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏‚Ä¶"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    supplier = md2_escape(data.get("supplier", ""))
    date = format_date(data.get("date", ""))
    invoice_no = md2_escape(data.get("number", ""))
    
    header = f"üìë {supplier} ‚Ä¢ {date}"
    if invoice_no:
        header += f" ‚Ä¢ ‚Ññ {invoice_no}"
    
    # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    ok_positions = len([p for p in positions if not any(
        i for i in issues if i.get("index") == positions.index(p) + 1
    )])
    warn_positions = len(positions) - ok_positions
    
    stats = f"‚úÖ {ok_positions} –ø–æ–∑–∏—Ü–∏–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ"
    if warn_positions > 0:
        stats += f" ‚Ä¢ ‚ö†Ô∏è {warn_positions} —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏
    formatted_positions = []
    for i, pos in enumerate(positions, 1):
        pos_issues = [
            issue for issue in issues 
            if issue.get("index") == i
        ]
        formatted_positions.append(format_position(pos, i, pos_issues))
    
    # –°–æ–±–∏—Ä–∞–µ–º —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_parts = []
    message_parts.append(header)
    message_parts.append(stats)
    message_parts.extend(formatted_positions)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–∞—Ä—Å–µ—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
    parser_comment = data.get("parser_comment", "").strip()
    if parser_comment:
        message_parts.append(f"‚ÑπÔ∏è {md2_escape(parser_comment)}")
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏
    message = header + "\n"  # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    message += stats  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
    if formatted_positions:
        message += "\n\n" + "\n\n".join(formatted_positions)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –æ—Ç—Å—Ç—É–ø–æ–º
    if parser_comment:
        message += "\n\n‚ÑπÔ∏è " + md2_escape(parser_comment)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–±—Ä–µ–∑–∞–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    if len(message) > 4000:
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª–Ω—ã–π –∞–±–∑–∞—Ü
        parts = message[:4000].split("\n\n")
        message = "\n\n".join(parts[:-1])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        message += "\n\n..."
    
    return message 