"""
–ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏.
"""

from __future__ import annotations

from typing import List, Dict, Any, Optional
import re
import math
import html

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
PAGE_SIZE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
MAX_TABLE_WIDTH = 40  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ —Ç–∞–±–ª–∏—Ü—ã –≤ —Å–∏–º–≤–æ–ª–∞—Ö

def escape_html(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã HTML.
    """
    if not text:
        return ""
    return html.escape(text)


def render_summary(data: Dict[str, Any]) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç HTML-—Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è —Å–≤–æ–¥–∫–∏ –ø–æ –Ω–∞–∫–ª–∞–¥–Ω–æ–π.
    
    :param data: –¥–∞–Ω–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π
    :return: HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π –∏ –ø—Ä–æ–±–ª–µ–º
    positions = data.get("positions", [])
    active_positions = [p for p in positions if not p.get("deleted", False)]
    
    total_positions = len(active_positions)
    
    if "issues" in data:
        issues = data["issues"]
    else:
        # –ï—Å–ª–∏ issues –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø—ã—Ç–∞–µ–º—Å—è –≤—ã–¥–µ–ª–∏—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        issues = []
        for pos in active_positions:
            if pos.get("match_id") is None or pos.get("confidence", 1.0) < 0.85:
                issues.append({"index": positions.index(pos) + 1, "original": pos})
    
    problematic_count = len(issues)
    matched_count = total_positions - problematic_count
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–∫–ª–∞–¥–Ω–æ–π
    supplier = escape_html(data.get("supplier", "Unknown"))
    date = escape_html(data.get("date", "Unknown"))
    invoice_number = escape_html(data.get("number", ""))
    
    # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π HTML
    result = f"""üìÑ <b>Invoice draft</b>

üè∑Ô∏è <b>Supplier:</b> {supplier}
üìÖ <b>Date:</b> {date}{f" ‚Ññ{invoice_number}" if invoice_number else ""}

<b>Items parsed:</b> {total_positions}  
‚úÖ <b>Matched:</b> {matched_count}  """
    
    if problematic_count > 0:
        result += f"‚ùì <b>Need review:</b> {problematic_count}"
    else:
        result += "‚úÖ <b>All items matched!</b>"
    
    return result


def get_issue_icon(issue: Dict[str, Any]) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–æ–±–ª–µ–º—ã.
    """
    issue_type = issue.get("issue", "")
    original = issue.get("original", {})
    
    if "Not in database" in issue_type:
        return "‚ö†"
    elif "incorrect match" in issue_type or original.get("confidence", 1.0) < 0.85:
        return "‚ùî"
    elif "Unit" in issue_type:
        return "üîÑ"
    elif original.get("ignored", False):
        return "‚ùå"
    else:
        return "‚ùì"


def render_issues(data: Dict[str, Any], page: int = 0) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç HTML-—Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π.
    
    :param data: –¥–∞–Ω–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π —Å —Å–ø–∏—Å–∫–æ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
    :param page: –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 0)
    :return: HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    issues = data.get("issues", [])
    
    if not issues:
        return "<b>No issues to review!</b>"
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    total_pages = math.ceil(len(issues) / PAGE_SIZE)
    page = max(0, min(page, total_pages - 1))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ–ø—É—Å—Ç–∏–º—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    
    start_idx = page * PAGE_SIZE
    end_idx = min(start_idx + PAGE_SIZE, len(issues))
    
    current_issues = issues[start_idx:end_idx]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    result = f"‚ùó <b>Items to review ‚Äî page {page + 1} / {total_pages}</b>\n\n<code>"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    result += f"{'#':<3} {'Invoice item':<20} {'Issue':<15}\n"
    
    # –°—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    for issue in current_issues:
        index = issue.get("index", 0)
        original = issue.get("original", {})
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        item_name = original.get("name", "Unknown")
        unit = original.get("unit", "")
        if unit:
            item_name += f" {unit}"
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è
        if len(item_name) > 20:
            item_name = item_name[:17] + "..."
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã
        issue_type = issue.get("issue", "Unknown issue")
        icon = get_issue_icon(issue)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if "Not in database" in issue_type:
            display_issue = "Not in DB"
        elif "incorrect match" in issue_type:
            display_issue = "Low confidence"
        elif "Unit" in issue_type:
            display_issue = "Unit mismatch"
        else:
            display_issue = issue_type[:15]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É
        result += f"{index:<3} {item_name:<20} {icon} {display_issue:<15}\n"
    
    result += "</code>"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    result += "\n\nClick on an item to edit or use pagination buttons below."
    
    return result


def render_issue_edit_view(issue: Dict[str, Any]) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç HTML-—Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–π –ø—Ä–æ–±–ª–µ–º–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏.
    
    :param issue: –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–±–ª–µ–º–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
    :return: HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    original = issue.get("original", {})
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∑–∏—Ü–∏–∏
    index = issue.get("index", 0)
    name = escape_html(original.get("name", "Unknown"))
    quantity = original.get("quantity", 0)
    unit = escape_html(original.get("unit", ""))
    price = original.get("price", 0)
    sum_val = original.get("sum", 0)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã
    issue_type = issue.get("issue", "Unknown issue")
    icon = get_issue_icon(issue)
    
    if "Not in database" in issue_type:
        issue_description = "Product not found in database"
    elif "incorrect match" in issue_type:
        issue_description = "Possible incorrect match"
    elif "Unit" in issue_type:
        issue_description = "Unit measurement discrepancy"
    else:
        issue_description = issue_type
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    result = f"{icon} <b>Edit position #{index}</b>\n\n"
    
    # –î–µ—Ç–∞–ª–∏ –ø–æ–∑–∏—Ü–∏–∏
    result += f"<b>Name:</b> {name}\n"
    result += f"<b>Quantity:</b> {quantity} {unit}\n"
    
    if price:
        result += f"<b>Price:</b> {price:,.2f}\n"
    
    if sum_val:
        result += f"<b>Sum:</b> {sum_val:,.2f}\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–±–ª–µ–º–µ
    result += f"\n<b>Issue:</b> {issue_description}\n"
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º —Ç–æ–≤–∞—Ä–µ, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
    if product := issue.get("product"):
        result += f"\n<b>Database match:</b>\n"
        result += f"<b>‚Üí Name:</b> {escape_html(product.name)}\n"
        result += f"<b>‚Üí Unit:</b> {escape_html(product.unit)}\n"
    
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
    result += "\nSelect an action below to fix the issue:"
    
    return result


def render_product_selection(
    products: List[Dict[str, Any]], 
    query: str,
    page: int = 0,
    page_size: int = 5
) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç HTML-—Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.
    
    :param products: —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
    :param query: –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    :param page: –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    :param page_size: —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    :return: HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    total_pages = math.ceil(len(products) / page_size)
    page = max(0, min(page, total_pages - 1))
    
    start_idx = page * page_size
    end_idx = min(start_idx + page_size, len(products))
    
    current_products = products[start_idx:end_idx]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    query_html = escape_html(query)
    result = f"üîç <b>Product selection for '{query_html}'</b>\n"
    
    if total_pages > 1:
        result += f"<i>Page {page + 1} of {total_pages}</i>\n"
    
    result += "\n<b>Select a product from the list:</b>\n\n"
    
    # –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    for i, product in enumerate(current_products, start=1):
        name = escape_html(product.get("name", "Unknown"))
        unit = escape_html(product.get("unit", ""))
        confidence = product.get("confidence", 0) * 100
        
        result += f"{i}. <b>{name}</b> ({unit})"
        
        if confidence < 100:
            result += f" <i>{confidence:.0f}% match</i>"
        
        result += "\n"
    
    if not current_products:
        result += "<i>No products found. Try a different search query or create a new product.</i>"
    
    return result


def render_final_preview(
    invoice_data: Dict[str, Any],
    original_issues: List[Dict[str, Any]],
    fixed_issues: Dict[int, Dict[str, Any]]
) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç HTML-—Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–∫–ª–∞–¥–Ω–æ–π –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π.
    
    :param invoice_data: –¥–∞–Ω–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω–æ–π
    :param original_issues: –∏—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º
    :param fixed_issues: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö
    :return: HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–∫–ª–∞–¥–Ω–æ–π
    supplier = escape_html(invoice_data.get("supplier", "Unknown"))
    date = escape_html(invoice_data.get("date", "Unknown"))
    invoice_number = escape_html(invoice_data.get("number", ""))
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    result = f"‚úÖ <b>Invoice ready to send</b>\n\n"
    result += f"üè∑Ô∏è <b>Supplier:</b> {supplier}\n"
    result += f"üìÖ <b>Date:</b> {date}{f' ‚Ññ{invoice_number}' if invoice_number else ''}\n\n"
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
    positions = invoice_data.get("positions", [])
    active_positions = [p for p in positions if not p.get("deleted", False)]
    
    fixed_count = len(fixed_issues)
    original_issues_count = len(original_issues)
    remaining_issues = original_issues_count - fixed_count
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    result += f"<b>Total items:</b> {len(active_positions)}\n"
    
    if fixed_count > 0:
        result += f"‚úÖ <b>Fixed issues:</b> {fixed_count}\n"
    
    if remaining_issues > 0:
        result += f"‚ö†Ô∏è <b>Remaining issues:</b> {remaining_issues}\n"
    else:
        result += "‚úÖ <b>All issues resolved!</b>\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if "total_sum" in invoice_data:
        total_sum = invoice_data["total_sum"]
        result += f"\nüí∞ <b>Total amount:</b> {total_sum:,.2f}\n"
    else:
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –∏–∑ –ø–æ–∑–∏—Ü–∏–π
        total_sum = sum(float(p.get("sum", 0)) if p.get("sum") else 0 for p in active_positions)
        result += f"\nüí∞ <b>Total amount:</b> {total_sum:,.2f}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    if remaining_issues > 0:
        result += "\n‚ö†Ô∏è <i>Note: Some issues remain unresolved, but you can still proceed.</i>"
    
    result += "\n\nPlease confirm to send the invoice to Syrve."
    
    return result
