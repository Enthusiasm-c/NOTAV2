"""
Конвертация единиц измерения для накладных.

Поддерживаемые преобразования:
- Объем: мл ↔ л
- Вес: г ↔ кг
- Штучные товары: шт, упак, кор
"""

from typing import Tuple, Optional

# Словарь нормализации единиц измерения
UNIT_ALIASES = {
    # Объем
    "л": "л", "ltr": "л", "литр": "л", "литры": "л", "литров": "л",
    "мл": "мл", "ml": "мл", "миллилитр": "мл",
    # Вес
    "кг": "кг", "kg": "кг", "кило": "кг", "килограмм": "кг",
    "г": "г", "gr": "г", "грамм": "г", "гр": "г",
    # Штучные
    "шт": "шт", "штука": "шт", "штуки": "шт", "штук": "шт",
    "упак": "упак", "упаковка": "упак", "уп": "упак",
    "кор": "кор", "коробка": "кор", "коробки": "кор"
}

# Коэффициенты конвертации
CONVERSION_FACTORS = {
    ("мл", "л"): 0.001,
    ("л", "мл"): 1000,
    ("г", "кг"): 0.001,
    ("кг", "г"): 1000,
}

def normalize_unit(unit_str: str) -> str:
    """Нормализует единицу измерения к стандартному виду."""
    unit_str = unit_str.lower().strip()
    return UNIT_ALIASES.get(unit_str, unit_str)

def convert(value: float, from_unit: str, to_unit: str) -> Optional[float]:
    """
    Конвертирует значение из одной единицы измерения в другую.
    
    :param value: Исходное значение
    :param from_unit: Исходная единица измерения
    :param to_unit: Целевая единица измерения
    :return: Конвертированное значение или None, если конвертация невозможна
    """
    from_unit = normalize_unit(from_unit)
    to_unit = normalize_unit(to_unit)
    
    # Если единицы измерения уже совпадают
    if from_unit == to_unit:
        return value
    
    # Поиск коэффициента конвертации
    factor = CONVERSION_FACTORS.get((from_unit, to_unit))
    if factor is not None:
        return value * factor
    
    return None
